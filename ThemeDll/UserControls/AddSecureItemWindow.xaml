<local:CustomChildWindow x:Class="PasswordBoss.UserControls.AddSecureItemWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PasswordBoss.UserControls" 
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"      
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        mc:Ignorable="d" MaxContentHeight="446" >  
    <local:CustomChildWindow.Resources>
        <telerik:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <telerik:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter"/>
        
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>

        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#1A3852"/>
        <Style x:Key="AddItemCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="#B9B9B9"/>
            <Setter Property="Foreground" Value="#8F99A0"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0 12 0 0"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" Width="16" Height="16" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">

                                    <Path x:Name="optionMark" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="White" Margin="1" Opacity="0" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Fill="Red" Margin="2" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="8 0 0 0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#152E45"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="White"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="#1A3852"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#152E45"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="#1A3852"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#152E45"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        
       
        
    
        <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Margin" Value="12 1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource LightGrayTextForegroundColor}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource LightGrayTextForegroundColor}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource LightGrayTextForegroundColor}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        
    </local:CustomChildWindow.Resources>
    <local:CustomChildWindow.TitelContent>
        <Grid Margin="0 17 0 20" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <TextBlock  Margin="0 0 0 12" HorizontalAlignment="Left" Grid.ColumnSpan="2" Text="{Binding Title,RelativeSource={RelativeSource AncestorType={x:Type local:AddSecureItemWindow}}}" FontFamily="{DynamicResource OBProximaRegular}" x:Name="txtTitel"  TextWrapping="Wrap" Foreground="{DynamicResource SettingsTextLableForeground}" FontSize="30"/>

            <Grid  Grid.Row="1"   HorizontalAlignment="Left" Margin="0 0 12 0">
                <Border Height="65" Width="130"  Background="{Binding Background,Mode=TwoWay}"    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <Image  Height="65"  Width="130" x:Name="icon" Source="{Binding Image}"   HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None"/>
            </Grid>

            <telerik:RadDropDownButton x:Name="colorPicker" Visibility="{Binding CanPickColor,Converter={StaticResource BooleanToVisibilityConverter}}" 
                                       Grid.Row="1"  Grid.Column="1" IsOpen="{Binding IsOpenColorPicker,Mode=TwoWay}"
                                       Style="{DynamicResource RadDropDownButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Center">
                    <telerik:RadDropDownButton.Content>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{DynamicResource colorPicker}" Width="16" Height="16"  VerticalAlignment="Bottom"/>
                            <TextBlock  HorizontalAlignment="Left" TextAlignment="Left" Margin="9 0 0 0" VerticalAlignment="Center"
                            Foreground="#7F7F7F" Grid.Column="0" Grid.Row="2" 
                            Padding="0,0,0,0" FontSize="14" FontWeight="Light"   TextWrapping="Wrap"
                            FontFamily="{DynamicResource ProximaRegular}" Text="{DynamicResource ChooseIconColor}" />
                        </StackPanel>
                    </telerik:RadDropDownButton.Content>
                    <telerik:RadDropDownButton.DropDownContent>
                    <Grid>
                        <ListBox ItemContainerStyle="{StaticResource ListBoxItemStyle}"  Margin="10" ItemsSource="{DynamicResource SecureItemsColors}"  BorderThickness="0"  SelectedItem="{Binding Background,Mode=TwoWay}">
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <UniformGrid Columns="3"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Border Width="40" Height="20" CornerRadius="2" Margin="5" Background="{Binding .}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        <Button  VerticalAlignment="Top"  Command="{Binding CloseColorPickerCommand}" Margin="0,5,5,0" Style="{DynamicResource NoHoverEffectButtonStyle}" BorderThickness="0"  HorizontalAlignment="Right" Background="Transparent"  >
                            <Image Source="{DynamicResource imgCloseAlert}" Height="8" Width="8" />
                        </Button>
                    </Grid>
                  </telerik:RadDropDownButton.DropDownContent>
                </telerik:RadDropDownButton>

            <Grid Grid.Column="1" Grid.Row="1" x:Name="topDetailsGrid" Visibility="Collapsed" HorizontalAlignment="Right">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="21"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock HorizontalAlignment="Right"  Foreground="{DynamicResource PasswordBossBlackBackgroundColor}" TextWrapping="Wrap" 
                           TextAlignment="Left" Margin="0 0 0 5"
                                Padding="0,0,0,0"  FontSize="12" FontWeight="SemiBold" 
                                FontFamily="{DynamicResource ProximaRegular}" Text="Created:" />
                <TextBlock Grid.Column="2"  HorizontalAlignment="Left" TextAlignment="Left" Margin="0 0 0 5"
                            Padding="0,0,0,0" VerticalAlignment="Top" FontSize="12" TextWrapping="Wrap"
                           FontWeight="Normal" Foreground="{DynamicResource LightGrayTextForegroundColor}"
                            FontFamily="{DynamicResource ProximaRegular}" Text="{Binding CreatedDate}" />
                <TextBlock  Grid.Row="1"  HorizontalAlignment="Right"  Margin="0 0 0 3"
                            Foreground="{DynamicResource PasswordBossBlackBackgroundColor}" TextWrapping="Wrap"
                            TextAlignment="Left"
                                Padding="0,0,0,0"  FontSize="12" FontWeight="SemiBold" 
                                FontFamily="{DynamicResource ProximaRegular}" Text="Last Updated:" />
                <TextBlock Grid.Row="1" Grid.Column="2"   HorizontalAlignment="Left" TextAlignment="Left"
                            Foreground="{DynamicResource LightGrayTextForegroundColor}" Margin="0 0 0 5"
                            Padding="0,0,0,0" VerticalAlignment="Top" FontSize="12" TextWrapping="Wrap" FontWeight="Normal" 
                            FontFamily="{DynamicResource ProximaRegular}" Text="{Binding LastModifiedDate}" />
                <!--Visibility="{Binding Shared, Converter={StaticResource BooleanToVisibilityConverter}}" -->
                <Image  Grid.Row="2" HorizontalAlignment="Right"   Width="19" Height="16"  VerticalAlignment="Top"  RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Sharing}" Source="{DynamicResource imgSharePeopleHover}"/>
                <TextBlock HorizontalAlignment="Left"  Grid.Row="2" Grid.Column="2"   
                                Foreground="{DynamicResource SettingsGreenColor}" TextWrapping="Wrap" TextAlignment="Left"
                                Padding="0,0,0,0" VerticalAlignment="Bottom" FontSize="12" FontWeight="Normal" 
                                FontFamily="{DynamicResource ProximaRegular}" Text="{DynamicResource SharedWithMe}" />

            </Grid>      
        </Grid>
    </local:CustomChildWindow.TitelContent>
    <Grid Margin="0 7 0 2" HorizontalAlignment="Left" Width="448" MinHeight="430" >
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
            <ContentControl  x:Name="contentControl" HorizontalAlignment="Left" Content="{Binding .}" DataContext="{Binding .}"/>

        <Button  Margin="0 10 0 2" Grid.Row="1" HorizontalAlignment="Left" Style="{DynamicResource CommonButtonStyle}" Click="Button_Click" Command="{Binding AddNoteCommand}" Visibility="{Binding HasNote,Converter={StaticResource InvertedBooleanToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" >
                <TextBlock Text="{DynamicResource ItemFieldAddNote}" Style="{DynamicResource AddItemTextBlock}" Margin="0" VerticalAlignment="Bottom"/>
                    <Image  Source="{DynamicResource noteGrey}" Width="15" Height="18" Margin="8 0 0 0" VerticalAlignment="Bottom"/>
                </StackPanel>
            </Button>
        <Grid     Margin="0 10"  Visibility="{Binding HasNote,Converter={StaticResource BooleanToVisibilityConverter}}" Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock Text="{DynamicResource ItemNote}" Style="{DynamicResource AddItemTextBlock}"/>
            <Button Style="{DynamicResource CommonButtonStyle}" Visibility="{Binding HasNoteHistory,Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Right" Padding="9 3" BorderThickness="0" >
                <Image Source="{DynamicResource historyGrey}" Stretch="None"/>
            </Button>
            <TextBox  Height="97" Grid.Row="1" x:Name="notesTxt"  Text="{Binding Note}" Style="{DynamicResource AddItemTextBox}" VerticalAlignment="Top" AcceptsReturn="True" TextWrapping="Wrap">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="LostFocus">
                        <i:InvokeCommandAction Command="{Binding NoteLostFocusCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
        </Grid>

        <Expander  Grid.Row="3" x:Name="advancedExpander" 
                   Style="{StaticResource SimpleExpanderStyle}" Margin="0 15 " Visibility="{Binding HasAddvancedSettings,Converter={StaticResource BooleanToVisibilityConverter}}" >
            <Expander.Header>
                <TextBlock Text="{DynamicResource ItemFieldAdvancedSettings}" Foreground="{DynamicResource SettingsTextBoxBorderColor}" FontSize="12" FontWeight="SemiBold"/>
            </Expander.Header>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <CheckBox Content="{DynamicResource AutoLogin}" IsChecked="{Binding Autologin,Mode=TwoWay}" Style="{StaticResource AddItemCheckBoxStyle}"/>
                <CheckBox Content="{DynamicResource Subdomain}" IsChecked="{Binding SubDomain,Mode=TwoWay}"  Grid.Row="1" Style="{StaticResource AddItemCheckBoxStyle}"/>
                <CheckBox Content="{DynamicResource UseSecureBrowser}" IsChecked="{Binding UseSecureBrowser,Mode=TwoWay}"  Grid.Column="1" Style="{StaticResource AddItemCheckBoxStyle}"/>
                <CheckBox Content="{DynamicResource ItemFieldRequireMasterPassword}" Grid.Row="1" IsChecked="{Binding RequireMasterPassword,Mode=TwoWay}"  Grid.Column="1" Style="{StaticResource AddItemCheckBoxStyle}"/>
            </Grid>
        </Expander>
    </Grid>
</local:CustomChildWindow>
