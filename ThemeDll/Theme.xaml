<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib" 
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:helpers="clr-namespace:PasswordBoss.Helpers"
                    xmlns:uc="clr-namespace:QuickZip.UserControls"
                    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/TreeView.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/GridView.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/DropDownButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/ContextMenu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/SecureItem.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/Components/Expander.xaml" />
        <ResourceDictionary Source="pack://application:,,,/theme;component/UserControls/CustomChildWindow/CustomChildWindow.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <x:Array x:Key="SecureItemsColors" Type="SolidColorBrush" >
        <!--Passwords-->
        <SolidColorBrush>#0078D7</SolidColorBrush>
        <SolidColorBrush>#4F4DA0</SolidColorBrush>
        <SolidColorBrush>#770077</SolidColorBrush>
        <SolidColorBrush>#2ECC71</SolidColorBrush>
        <SolidColorBrush>#DA3B01</SolidColorBrush>
        <SolidColorBrush>#486860</SolidColorBrush>
        <SolidColorBrush>#212121</SolidColorBrush>
        <SolidColorBrush>#881798</SolidColorBrush>
        <!--Personal Info-->
        <SolidColorBrush>#9951C0</SolidColorBrush>
        <SolidColorBrush>#2D7D9A</SolidColorBrush>
        <SolidColorBrush>#00B7C3</SolidColorBrush>
        <SolidColorBrush>#D3746A</SolidColorBrush>
        <SolidColorBrush>#495B49</SolidColorBrush>

        <!--Digital Wallet-->
        <SolidColorBrush>#107C10</SolidColorBrush>
        <SolidColorBrush>#B99834</SolidColorBrush>

        <!--Secure Notes-->
        <SolidColorBrush>#E81123</SolidColorBrush>
        <SolidColorBrush>#5D6A7C</SolidColorBrush>
        <SolidColorBrush>#7B6D3F</SolidColorBrush>
        <SolidColorBrush>#8C989C</SolidColorBrush>
        <SolidColorBrush>#FFB900</SolidColorBrush>
        <SolidColorBrush>#0099BC</SolidColorBrush>
        <SolidColorBrush>#C239B3</SolidColorBrush>
        <SolidColorBrush>#4D5767</SolidColorBrush>
        <SolidColorBrush>#CA5010</SolidColorBrush>
        <SolidColorBrush>#2C3E50</SolidColorBrush>
        <SolidColorBrush>#3498DB</SolidColorBrush>
        <SolidColorBrush>#BDC3C7</SolidColorBrush>
        <SolidColorBrush>#6596D9</SolidColorBrush>

    </x:Array>
    
    <Style TargetType="telerik:TreeViewDragVisual">
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
    </Style>

    <SolidColorBrush x:Key="passwordWeakColor" Color="#FF0000" />
    <SolidColorBrush x:Key="passwordNormalColor" Color="#FF5A3D" />    
    <SolidColorBrush x:Key="passwordMediumColor" Color="#FF6A00" />
    <SolidColorBrush x:Key="passwordStrongColor" Color="#FFCC00" />
    <SolidColorBrush x:Key="passwordVeryStrongColor" Color="#00D1A7" />

    <BooleanToVisibilityConverter x:Key="BoolToVisibility" />

    <SolidColorBrush x:Key="onboardWeakColor" Color="#fbc404" />
    <SolidColorBrush x:Key="onboardDuplicateColor" Color="#fe8625" />
    <SolidColorBrush x:Key="onboardInsecureColor" Color="#e0272e" />
    
    <!-- from Account creation process -->
    <SolidColorBrush x:Key="lightGreenColor" Color="#00D1A6" />
    <SolidColorBrush x:Key="grayLabelColor" Color="#787878" />
    <SolidColorBrush x:Key="grayBlueLabelColor" Color="#203C52" />
    <SolidColorBrush x:Key="activateButtonBackgroundColor" Color="#D4D4D4" />
    <SolidColorBrush x:Key="activateButtonForegroundColor" Color="#203C52" />
    <SolidColorBrush x:Key="commonBorderColor" Color="#C4D0CE" />
    <SolidColorBrush x:Key="licenseForegroundColor" Color="#7E8A8E" />
    <SolidColorBrush x:Key="validationErrorColor" Color="#E22A02" />
    <SolidColorBrush x:Key="licenseCarretColor" Color="#203C52" />

    <!-- COLOR -->
    <!--All colors required for entire application-->

    <SolidColorBrush x:Key="PasswordBossGreenColor">#00D1A7</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossGreenHoverColor">#00A785</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossRedColor">#F26C4F</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossRedHoverColor">#CE5C43</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossBlackBackgroundColor">#14212A</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossBlueHeaderColor">#1F4763</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordBossDarkGreenColor">#00AE92</SolidColorBrush>

    <SolidColorBrush x:Key="WatermarkLightGrayColor">#A1A1A1</SolidColorBrush>

    <SolidColorBrush x:Key="TextBoxBackground">#EFF3F3</SolidColorBrush>
    <SolidColorBrush x:Key="NotInstalledExtensionButtonColor">#E1E1E1</SolidColorBrush>
    <SolidColorBrush x:Key="SecureBrowserLightGrayBackgroundColor">#F2F5F5</SolidColorBrush>
    <SolidColorBrush x:Key="SelectLanguageToggleButtonBackground">#F4F4F4</SolidColorBrush>
    <SolidColorBrush x:Key="SelectLanguageComboBoxItemSeparator">#EEF0F0</SolidColorBrush>
    <SolidColorBrush x:Key="MainWindowGrayBackgroundColor">#E4E9E8</SolidColorBrush>
    <SolidColorBrush x:Key="ImportPasswordsBackgroundColor">#F0F2F1</SolidColorBrush>
    <SolidColorBrush x:Key="SearchboxForeground">#cccccc</SolidColorBrush>
    <SolidColorBrush x:Key="CustomDatePickerBackground">#EEF2F3</SolidColorBrush>
    <SolidColorBrush x:Key="SignInButtonBackground">#DDDDDD</SolidColorBrush>
    <SolidColorBrush x:Key="DialogGrayColor">#E6E6E6</SolidColorBrush>
    <SolidColorBrush x:Key="TextboxBorderbrush">#E4E9E9</SolidColorBrush>
    <SolidColorBrush x:Key="AlertPopUpBorderBrushcolor">#CACDCF</SolidColorBrush>
    <SolidColorBrush x:Key="DigitalWalletGrayCheckboxColor">#C2CDC9</SolidColorBrush>
    <SolidColorBrush x:Key="MainWindowBackgroundColor">#BFCED3</SolidColorBrush>
    <SolidColorBrush x:Key="LoginGrayBorder">#C4CCCC</SolidColorBrush>
    <SolidColorBrush x:Key="FillEllipsesDefaultcolor">#C7CBCD</SolidColorBrush>
    <SolidColorBrush x:Key="DashboardGridBackground">#C5C5C5</SolidColorBrush>
    <SolidColorBrush x:Key="GrayBorderColor">#C9C9C9</SolidColorBrush>
    <SolidColorBrush x:Key="AccountSettingsGrayBackgroundColor">#D5DADA</SolidColorBrush>
    <SolidColorBrush x:Key="PasswordProgressGrayColor">#8F9391</SolidColorBrush>
    <SolidColorBrush x:Key="AddPasswordsAutomaticallyComboboxColor">#C0C5C9</SolidColorBrush>
    <SolidColorBrush x:Key="SecureBrowserSelectedTabGrayColor">#BDC4C5</SolidColorBrush>
    <SolidColorBrush x:Key="SelectLanguageToggleButtonBorderBrush">#ADB2B5</SolidColorBrush>
    <SolidColorBrush x:Key="RoundButtonGrayColor">#646f73</SolidColorBrush>
    <SolidColorBrush x:Key="SelectLanguageToggleButtonForeground">#838383</SolidColorBrush>
    <SolidColorBrush x:Key="LightGrayTextForegroundColor">#768387</SolidColorBrush>
    <SolidColorBrush x:Key="SettingsLightGrayBorderColor">#A3A3A3</SolidColorBrush>
    <SolidColorBrush x:Key="SecureScoreUpdateLightGrayColor">#879197</SolidColorBrush>
    <SolidColorBrush x:Key="AddShareSelectedBorderColor">#FF18AD8C</SolidColorBrush>
    
    <SolidColorBrush x:Key="DialogBorderColor">#1F4763</SolidColorBrush>
    <SolidColorBrush x:Key="ProductTourGrayColor">#888888</SolidColorBrush>
    <SolidColorBrush x:Key="AddItemTextForegroundColor">#616161</SolidColorBrush>
    <SolidColorBrush x:Key="AlertsAndNotificationsBackgroundColor">#F2F5F4</SolidColorBrush>


    <SolidColorBrush x:Key="UpdateButtonStyleChecked">#BCDDEE</SolidColorBrush>

    <SolidColorBrush x:Key="WhiteColor">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="AliceBlueBackgroundColor">#F0F0F0</SolidColorBrush>
    <SolidColorBrush x:Key="BlackColor">#000000</SolidColorBrush>
    <SolidColorBrush x:Key="TextForegroundcolor">#15212A</SolidColorBrush>
    <SolidColorBrush x:Key="RadioButtonBackground">#2D4955</SolidColorBrush>
    <SolidColorBrush x:Key="ShareComboboxForegroundColor">#33393F</SolidColorBrush>
    <SolidColorBrush x:Key="ImportFromApplicationsForegroundColor">#101920</SolidColorBrush>
    <SolidColorBrush x:Key="GrayColor">Gray</SolidColorBrush>
    <SolidColorBrush x:Key="TransparentColor">Transparent</SolidColorBrush>

    <SolidColorBrush x:Key="DashboardButtonGreenColor">#02CF9E</SolidColorBrush>
    <SolidColorBrush x:Key="ImportFromApplicationsGreenButtonColor">#00C49C</SolidColorBrush>


    <SolidColorBrush x:Key="CalendarItemColor">#333333</SolidColorBrush>

    <SolidColorBrush x:Key="SetupWizardOneClickButtonColor">#245A83</SolidColorBrush>
    <SolidColorBrush x:Key="InAppThemeSeparator">#4A5052</SolidColorBrush>
    <SolidColorBrush x:Key="MasterPasswordDialogGrayColor">#787C7D</SolidColorBrush>
    <SolidColorBrush x:Key="SecurityAlertDeleteBox">#878688</SolidColorBrush>
    <SolidColorBrush x:Key="MainWindowHeaderGridColor">#929292</SolidColorBrush>
    <SolidColorBrush x:Key="AccountSettingsAutoLockTimeLimit">#A1A9AC</SolidColorBrush>
    <SolidColorBrush x:Key="AlertButtonRedColor">#D93635</SolidColorBrush>
    <SolidColorBrush x:Key="DigitalWalletCheckedToggleButtonColor">#EFF3F2</SolidColorBrush>

    <SolidColorBrush x:Key="CheckBoxReadAcceptBorderbrush">#707070</SolidColorBrush>

    <SolidColorBrush x:Key="SelectLanguageComboBoxForeground">#838E92</SolidColorBrush>
    <SolidColorBrush x:Key="SelectLanguageComboBoxItemForeground">#2E383F</SolidColorBrush>


    <SolidColorBrush x:Key="GreenColor">Green</SolidColorBrush>


    <SolidColorBrush x:Key="TextMessageForegroundcolor">#4F585E</SolidColorBrush>
    <SolidColorBrush x:Key="AlertButtonBackgroundcolor">#294252</SolidColorBrush>
    <SolidColorBrush x:Key="AlertBorderStrokecolor">#16222A</SolidColorBrush>
    <SolidColorBrush x:Key="HiglightedBorderStrokecolor">#294252</SolidColorBrush>
    <SolidColorBrush x:Key="SearchTextForegroundcolor">#1C2932</SolidColorBrush>
    <SolidColorBrush x:Key="CaracCursorcolor">#09CFA6</SolidColorBrush>
    <SolidColorBrush x:Key="foregroundsharecolor">#15222B</SolidColorBrush>
    <!--security score color-->
    <SolidColorBrush x:Key="BorderColor">#DCE0E1</SolidColorBrush>
    <SolidColorBrush x:Key="SecurityScoreDynamicContentColor">#15222D</SolidColorBrush>
    <SolidColorBrush x:Key="HeaderForegroundColorColor">#4B4F52</SolidColorBrush>
    <SolidColorBrush x:Key="AccountSettingTextColor">#26323A</SolidColorBrush>



    <!-- Style custom colors -->
    <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#E5E5E5"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#D9D9D9"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#DCECFC"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#7Eb4EA"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#DAECFC"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#569DE5"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#D6D6D6"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#E7EAEA"/>

    <SolidColorBrush x:Key="SettingsTextBoxBorderColor" Color="#7E7E7E"/>
    <SolidColorBrush x:Key="SettingsTextLableForeground" Color="#204261"/>
    <SolidColorBrush x:Key="SettingsHelpBackground" Color="#768387"/>
    <SolidColorBrush x:Key="SettingsSecurityForeground" Color="#899194"/>
    <SolidColorBrush x:Key="SettingsGreenColor">#00A785</SolidColorBrush>

    <SolidColorBrush x:Key="AllPasswordsColor">#768387</SolidColorBrush>
    <SolidColorBrush x:Key="DuplicatePasswordsColor">#DE171E</SolidColorBrush>
    <SolidColorBrush x:Key="WeakPasswordsColor">#FE8422</SolidColorBrush>
    <SolidColorBrush x:Key="OldPasswordsColor">#FBC404</SolidColorBrush>
    
    <!-- COLOR END -->

    <!-- FONT START -->

    <!--Fontsize-->
    <sys:Double x:Key="FontSize11">11</sys:Double>
    <sys:Double x:Key="FontSize12">12</sys:Double>
    <sys:Double x:Key="FontSize13">13</sys:Double>
    <sys:Double x:Key="FontSize14">14</sys:Double>

    <sys:Double x:Key="RadioButtonfontSize">13.22</sys:Double>
    <sys:Double x:Key="FontSize16">16</sys:Double>
    <sys:Double x:Key="FontSize17">17</sys:Double>
    <sys:Double x:Key="FontSize20">20</sys:Double>

    <!--FontWeight-->
    <FontWeight x:Key="BoldWeight">Bold</FontWeight>
    <FontWeight x:Key="SemiboldWeight">SemiBold</FontWeight>
    <FontWeight x:Key="NormalWeight">Normal</FontWeight>

    <!-- FONT END -->
    <CornerRadius x:Key="CommonCornerRadius">2</CornerRadius>

    <!-- CONTROL STYLES -->

    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Height="5" Background="{DynamicResource PasswordBossGreenColor}" CornerRadius="0" Margin="0,0,-12,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IncreaseRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Height="5" Background="Transparent" CornerRadius="0" Margin="0,0,-12,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" 
                  Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" 
                  Stroke="{StaticResource SliderThumb.Static.Border}"  StrokeThickness="1" UseLayoutRounding="True" 
                  VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Ellipse Margin="0,0,-2,0" x:Name="grip" Height="13" Width="13" Fill="{DynamicResource PasswordBossGreenColor}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" Stroke="{StaticResource SliderThumb.Static.Border}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{DynamicResource BlackColor}" Height="5" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas>
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{DynamicResource IncreaseRepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{DynamicResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbHorizontalTop}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbHorizontalBottom}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                <Border x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{DynamicResource IncreaseRepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{DynamicResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbVerticalLeft}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbVerticalRight}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ListBox item container style for dynamic list view data-->
    <Style x:Key="ListBoxCustomItemContainerStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="6"
                            BorderThickness="2.5" Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter Margin="1,1,1,1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="Transparent" />
                            <Setter Property="Foreground" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent" />
                            <Setter Property="Foreground" Value="Transparent" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboboxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualCustomStyle}" />
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border"
                                        Value="{DynamicResource Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource Button.MouseOver.Border}" />
                        </Trigger>-->
                        <!--<Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border"
                                        Value="{DynamicResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource Button.Pressed.Border}" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border"
                                        Value="{DynamicResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="dashboardComboStyle" TargetType="{x:Type  ComboBox}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Green" />
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Width" Value="174" />
        <Setter Property="Height" Value="42" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid x:Name="combogrid" Background="{DynamicResource WhiteColor}">
                        <ToggleButton
                                Name="ToggleButton"
                                BorderBrush="Transparent"
                                Background="{DynamicResource WhiteColor}"
                                Style="{DynamicResource ComboboxToggleButtonStyle}" Margin="0,0,0,0"
                                Focusable="True" Canvas.ZIndex="1"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"  HorizontalContentAlignment="Left"
                                Padding="10,0,0,0">
                            <TextBlock Text="{DynamicResource ViewBy}" FontWeight="{DynamicResource NormalWeight}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}"
                                       FontFamily="{DynamicResource ProximaRegular}" FontSize="12" MaxWidth="65" TextWrapping="Wrap" />
                        </ToggleButton>
                        <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="65,0,0,0"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />

                        <Image HorizontalAlignment="Right" Margin="0,0,15,0" VerticalAlignment="Center"
                                   Source="{DynamicResource imgDownArow}" Height="5" Width="8" />
                        <Popup
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False"
                                PopupAnimation="Slide" Margin="0,0,0,0">
                            <Grid Width="175" Margin="0,0,0,0"
                                      Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border
                                        x:Name="DropDownBorder"
                                        Background="{DynamicResource WhiteColor}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource GrayColor}" Margin="0,0,0,0" />
                                <ScrollViewer Margin="0,2,0,2" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                                    Margin="0,0,0,0" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{x:Null}" />
                            <Setter TargetName="combogrid" Property="Background" Value="{x:Null}" />

                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="false">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GayBorderComboStyle" TargetType="{x:Type  ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Height" Value="27" />
        <Setter Property="Padding" Value="9 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                    <Grid x:Name="combogrid"  >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <ToggleButton Grid.ColumnSpan="2"
                                Name="ToggleButton"
                                BorderBrush="Transparent"
                                Style="{DynamicResource ComboboxToggleButtonStyle}" Margin="0,0,0,0"
                                Focusable="True" Canvas.ZIndex="1"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"  HorizontalContentAlignment="Left"
                                Padding="10,0,0,0">
                        </ToggleButton>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                Name="ContentSite"
                                IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1" >
                                <Rectangle Fill="{DynamicResource LightGrayTextForegroundColor}" VerticalAlignment="Stretch" Width="1"/>
                                <Image  VerticalAlignment="Center" Margin="8 0"
                                           Source="{DynamicResource imgDownArrow1}" Height="5" Width="8" />
                            </StackPanel>
                            <Popup Grid.ColumnSpan="2"
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False"
                                PopupAnimation="Slide" Margin="0,0,0,0">
                            <Grid Width="175" Margin="0,0,0,0"
                                      Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border
                                        x:Name="DropDownBorder"
                                        Background="{DynamicResource WhiteColor}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource GrayColor}" Margin="0,0,0,0" />
                                <ScrollViewer Margin="0,2,0,2" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                                    Margin="0,0,0,0" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>

                    </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{x:Null}" />
                            <Setter TargetName="combogrid" Property="Background" Value="{x:Null}" />

                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="false">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="Transparent" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="FilterComboboxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="10,0,0,0" />
        <Setter Property="HorizontalContentAlignment"
                    Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                    Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True" Height="24" VerticalAlignment="Center">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="TextElement.FontFamily" TargetName="Bd"
                                        Value="{DynamicResource ProximaRegular}" />
                            <Setter Property="TextElement.FontSize" TargetName="Bd" Value="12" />
                            <Setter Property="TextElement.FontWeight" TargetName="Bd" Value="Normal" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnStyleNoHover" TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnSetupWizardOneClick" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0 0 0 0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="btnSetupWizardOneClickEnabled" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0 0 0 2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              ToolTip="{DynamicResource OneClickLoginEnabled}"/>
                            <!--<Image Source="{DynamicResource imgLogoSmall}" HorizontalAlignment="Right" VerticalAlignment="Top" Height="14" Width="14" Margin="0 -7 -7 0" ToolTip="One-Click Login"/>-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="ProductTourContainerStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0" Background="Transparent" Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true" Margin="2,0,0,0">
                        <Ellipse Name="Ellipse" Height="10" Width="10" Fill="{DynamicResource SignInButtonBackground}"
                         VerticalAlignment="Top" Grid.Column="0" Margin="3,0,5,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Fill" TargetName="Ellipse" Value="{DynamicResource PasswordBossGreenColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="SecureBrowserListPagingStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0" Background="Transparent" Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True" Margin="2,0,0,0">
                        <Ellipse Name="Ellipse" Height="10" Width="10" Fill="{DynamicResource SignInButtonBackground}"
                         VerticalAlignment="Top" Grid.Column="0" Margin="3,0,10,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Fill" TargetName="Ellipse" Value="{DynamicResource PasswordBossGreenColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImportFromApplicationButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="11" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#C7CBCD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossRedHoverColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProductTourButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="25" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossRedHoverColor}" TargetName="border"/>
                        </Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{DynamicResource PasswordBossRedHoverColor}" TargetName="border"/>
						</Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProductTourButtonGreenStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#48B900" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#7ECE4C" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProductTourButtonRedStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossRedHoverColor}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ACGreenButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="25" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossGreenHoverColor}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- SecurityScore List Data template-->
    <DataTemplate x:Key="SecurityScoreDataTemplate">
        <Grid HorizontalAlignment="Stretch" Margin="0,0,0,0" >
            <Grid.RowDefinitions>
                <RowDefinition Height="5"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="5"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="180"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="180"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding siteName}" Style="{DynamicResource SecurityScoreTextBlockStyleForDynamicContent}" VerticalAlignment="Center"/>
            <TextBlock Grid.Row="1" Grid.Column="3" Text="{Binding userName}" Style="{DynamicResource SecurityScoreTextBlockStyleForDynamicContent}"  VerticalAlignment="Center"/>
            <Grid Grid.Row="1" Grid.Column="5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <PasswordBox Grid.Column="0" FontFamily="{DynamicResource ProximaRegular}"  IsEnabled="False" Foreground="{DynamicResource SecurityScoreDynamicContentColor}"  BorderThickness="0" 
                             Background="Transparent" FontSize="14"  VerticalAlignment="Center" VerticalContentAlignment="Center" Visibility="{Binding NegatePasswordVisibility, Converter={StaticResource BoolToVisibility}}"
                             helpers:PasswordHelper.Attach="True" helpers:PasswordHelper.Password="{Binding Path=password,Mode=TwoWay}" />
                <TextBox Grid.Column="0" Visibility="{Binding PasswordVisibility, Converter={StaticResource BoolToVisibility}}" Text="{Binding password}" Foreground="{DynamicResource SecurityScoreDynamicContentColor}"  BorderThickness="0" 
                          Background="Transparent" FontSize="14" FontFamily="{DynamicResource ProximaRegular}"  VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                <Image x:Name="EyeImage" Grid.Column="1" Source="{DynamicResource imgCloseEye}"  Height="16" Width="21" VerticalAlignment="Center" >
                    <Image.InputBindings>
                        <MouseBinding MouseAction="LeftClick" Command="{Binding ElementName=SecurityScoreList,Path=DataContext.SecurityScoreEyeCommand}"
                                      CommandParameter="{Binding id}"/>
                    </Image.InputBindings>
                </Image>
            </Grid>

            <Button Grid.Row="1" Grid.Column="7" x:Name="btnSecurityScoreUpdate"   VerticalAlignment="Center"
                    Content="{DynamicResource UpdateUppercase}" Command="{Binding ElementName=SecurityScoreList,Path=DataContext.SecurityScoreUpdateCommand}"
                    HorizontalAlignment="Left" Height="15" FontSize="13"
                    FontFamily="{DynamicResource ProximaBold}"  Background="{DynamicResource SecureBrowserLightGrayBackgroundColor}" FontWeight="Bold"
                    Foreground="#00C59D" Style="{DynamicResource UpdateButtonStyle}" CommandParameter="{Binding siteUri}" Margin="0,0,10,0"/>

        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding PasswordVisibility}" Value="True">
                <Setter TargetName="EyeImage" Property="Source" Value="{DynamicResource imgEyeClose}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Color x:Key="FilledColor" A="255" B="166" R="0" G="209"/>
    <Color x:Key="UnfilledColor" A="0" B="155" R="155" G="155"/>

    <Style x:Key="SpinnerSmallAnimation" TargetType="{x:Type Control}">


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Animation0" BeginTime="00:00:00.0" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse0" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation1" BeginTime="00:00:00.2" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse1" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation2" BeginTime="00:00:00.4" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse2" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation3" BeginTime="00:00:00.6" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse3" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation4" BeginTime="00:00:00.8" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse4" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation5" BeginTime="00:00:01.0" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse5" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation6" BeginTime="00:00:01.2" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse6" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="Animation7" BeginTime="00:00:01.4" RepeatBehavior="Forever">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="ellipse7" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.0" Value="{StaticResource FilledColor}"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.6" Value="{StaticResource UnfilledColor}"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid Margin="0,0,0,0">
                            <Canvas Height="Auto" Width="Auto" Margin="0,0,0,0">
                                <Canvas.Resources>
                                    <Style TargetType="{x:Type Ellipse}">
                                        <Setter Property="Width" Value="15"/>
                                        <Setter Property="Height" Value="15" />
                                        <Setter Property="Fill" Value="#009B9B9B" />
                                    </Style>
                                </Canvas.Resources>

                                <Ellipse x:Name="ellipse0" Canvas.Left="1.25" Canvas.Top="6.083" Width="3.977" Height="3.395"/>
                                <Ellipse x:Name="ellipse1" Canvas.Top="2.915" Canvas.Left="2.51" Width="3.976" Height="3.395"/>
                                <Ellipse x:Name="ellipse2" Canvas.Left="6.221" Canvas.Top="1.5" Width="3.977" Height="3.395"/>
                                <Ellipse x:Name="ellipse3" Canvas.Left="9.999" Canvas.Top="2.858" Width="3.977" Height="3.395"/>
                                <Ellipse x:Name="ellipse4" Canvas.Left="11.523" Canvas.Top="6.026" Width="3.977" Height="3.396" />
                                <Ellipse x:Name="ellipse5" Canvas.Left="9.999" Canvas.Top="9.139" Width="3.977" Height="3.395"/>
                                <Ellipse x:Name="ellipse6" Canvas.Left="6.287" Canvas.Top="10.327" Width="3.977" Height="3.395"/>
                                <Ellipse x:Name="ellipse7" Canvas.Top="9.082" Canvas.Left="2.642" Width="3.976" Height="3.395" />
                                <Ellipse Width="10.473" Height="8.94" Canvas.Left="3.105" Canvas.Top="3.141" Visibility="Hidden"/>
                            </Canvas>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Animation0}" x:Name="Storyboard0" />
                                <BeginStoryboard Storyboard="{StaticResource Animation1}" x:Name="Storyboard1"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation2}" x:Name="Storyboard2"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation3}" x:Name="Storyboard3"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation4}" x:Name="Storyboard4"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation5}" x:Name="Storyboard5"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation6}" x:Name="Storyboard6"/>
                                <BeginStoryboard Storyboard="{StaticResource Animation7}" x:Name="Storyboard7"/>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Storyboard0"/>
                                <StopStoryboard BeginStoryboardName="Storyboard1"/>
                                <StopStoryboard BeginStoryboardName="Storyboard2"/>
                                <StopStoryboard BeginStoryboardName="Storyboard3"/>
                                <StopStoryboard BeginStoryboardName="Storyboard4"/>
                                <StopStoryboard BeginStoryboardName="Storyboard5"/>
                                <StopStoryboard BeginStoryboardName="Storyboard6"/>
                                <StopStoryboard BeginStoryboardName="Storyboard7"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Template for Secure Browser tab -->
    <ControlTemplate x:Key="SecureBrowserSelectedTabTemplate" TargetType="{x:Type TabItem}">
        <Grid Margin="0 0 -10 0" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>

            <Path Data="M10 0 L 0 23 L 15 20 " Fill="{TemplateBinding Background}"
                                              Stroke="{DynamicResource SecureBrowserSelectedTabGrayColor}" Canvas.ZIndex="1" StrokeThickness="0.5" Height="20" />
            <Border VerticalAlignment="Bottom" Height="2"
                                                Background="{TemplateBinding Background}" Grid.Column="0"
                                                Grid.ColumnSpan="4" CornerRadius="8,8,0,0" />
            <Border Background="{TemplateBinding Background}" Grid.Column="1"
                                                BorderBrush="{TemplateBinding Background}" CornerRadius="2,2,0,0"
                                                Height="{TemplateBinding Height}" />
            <Border VerticalAlignment="Top" Height="0.5" Background="{DynamicResource SecureBrowserSelectedTabGrayColor}"
                                                Grid.Column="1" CornerRadius="8,0,0,0" />

            <Border Background="{TemplateBinding Background}" Grid.Column="2"
                                                BorderBrush="{TemplateBinding Background}"
                                                Height="{TemplateBinding Height}" />
            <Border VerticalAlignment="Top" Height="0.5" Background="{DynamicResource SecureBrowserSelectedTabGrayColor}"
                                                Grid.Column="2" />

            <StackPanel Visibility="{Binding CloseButtonVisibility}" Grid.Column="1"
                                                    Orientation="Horizontal">
                <Image
                                                   Source="{Binding SearchBar.SiteImage}" Height="16" Width="16"
                                                   HorizontalAlignment="Left" VerticalAlignment="Center"
                                                   Margin="3,0,4,0" >
                    <Image.Style>
                        <Style TargetType="Image" >
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Navigating, Mode=TwoWay}" Value="False">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Navigating, Mode=TwoWay}" Value="True">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <Control x:Name="cntSpinner" HorizontalAlignment="Left" VerticalAlignment="Center"
						Width="16" Height="16">
                    <Control.Style>
                        <Style TargetType="Control" BasedOn="{StaticResource SpinnerSmallAnimation}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Navigating, Mode=TwoWay}" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Navigating, Mode=TwoWay}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Control.Style>
                </Control>
                <ContentPresenter ContentSource="Header" HorizontalAlignment="Left"
                                                              Margin="3,3,0,0" VerticalAlignment="Center" />

            </StackPanel>

            <Button Style="{DynamicResource CloseButtonStyle}" Grid.Column="2"
                                                    Visibility="{Binding CloseButtonVisibility}" Height="10" Width="10"
                                                    HorizontalAlignment="Right" VerticalAlignment="Center"
                                                    Margin="3,0,4,0">
                <Button.Background>
                    <ImageBrush ImageSource="{DynamicResource imgCloseAlert}" />
                </Button.Background>
                <Button.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                                                  Command="{Binding RemoveSelectedTabCommand}" />
                </Button.InputBindings>
            </Button>
            <Path Fill="{TemplateBinding Background}" Grid.Column="3" Stroke="{DynamicResource SecureBrowserSelectedTabGrayColor}"
                                              StrokeThickness="0.5" Canvas.ZIndex="0" Height="20" />
            <Path Data="M0 20 L 9 23 L0 0" Fill="{TemplateBinding Background}"
                                              Grid.Column="3" Stroke="{DynamicResource SecureBrowserSelectedTabGrayColor}" StrokeThickness="0.5" Canvas.ZIndex="0"
                                              Height="20" />
        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsSelected" Value="True">
                <Trigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource SecureBrowserLightGrayBackgroundColor}" />

                    <Setter Property="Canvas.ZIndex" Value="3" />
                </Trigger.Setters>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Trigger.Setters>
                    <Setter Property="Background" Value="#D1D6D8" />

                </Trigger.Setters>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style for add new tab button -->
    <Style x:Key="SecureBrowserAddNewTabStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Image Source="{DynamicResource imgPlus}" x:Name="AddNewTabImage" Visibility="Collapsed" 
                                       Height="9" Width="9" HorizontalAlignment="Center" VerticalAlignment="Center"  />

                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="AddNewTabImage" Value="Visible"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Template for adding new tab -->
    <ControlTemplate x:Key="SecureBrowserAddNewTabTemplate" TargetType="{x:Type TabItem}">
        <Grid Background="Transparent" Margin="-3,0,0,1" Height="15" Width="30" 
                  Visibility="{Binding NewTabButtonVisibility, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource BoolToVisibility}}">

            <Border Background="#79868F" CornerRadius="3">
                <Border.RenderTransform>
                    <SkewTransform AngleX="24" />
                </Border.RenderTransform>
            </Border>

            <Button Style="{DynamicResource SecureBrowserAddNewTabStyle}" Command="{Binding AddNewTabCommand}" Margin="5,0,0,0"
                                                Height="15" Width="30"
                                                HorizontalAlignment="Center" VerticalAlignment="Center" />
            <Grid.InputBindings>
                <MouseBinding Gesture="LeftClick" Command="{Binding AddNewTabCommand}"/>
            </Grid.InputBindings>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type TabControl}" x:Key="SecureBrowserControlTemplate">

        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Auto" Margin="160,0,0,0">
                            <TabPanel 
                                Name="HeaderPanel"
                                Grid.Row="0"
                                Panel.ZIndex="1" 
                                Margin="0,0,4,0" 
                                IsItemsHost="True"
                                KeyboardNavigation.TabIndex="1"
                                Background="Transparent" />
                        </ScrollViewer>
                        <Border 
                                            Name="Border" 
                                            Grid.Row="1"  
                                            CornerRadius="2" 
                                            KeyboardNavigation.TabNavigation="Local"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            KeyboardNavigation.TabIndex="2" >
                            <ContentPresenter 
                                              Name="PART_SelectedContentHost"
                                              Margin="0,0,0,0"
                                              ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HomepageItemTemplateBorder" TargetType="Border">
        <Setter Property="BorderThickness" Value="0, 0, 0, 0"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
    </Style>
    <DataTemplate x:Key="HomepageItemTemplate">
        <Border Margin="10,0,10,0"  Style="{StaticResource HomepageItemTemplateBorder}">
            <TextBlock Text="{Binding Name}" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                           Background="Transparent" Foreground="#8E9DA2" HorizontalAlignment="Center">
            </TextBlock>
        </Border>
    </DataTemplate>

    <Style x:Key="HomepageItemSelectedTemplateBorder" TargetType="Border">
        <Setter Property="BorderThickness" Value="0, 0, 0, 2"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"></Setter>
    </Style>

    <DataTemplate x:Key="HomepageItemSelectedTemplate">
        <Border Margin="10,0,10,0" Style="{DynamicResource HomepageItemSelectedTemplateBorder}">
            <TextBlock Text="{Binding Name}" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                           Background="Transparent" Foreground="{DynamicResource BlackColor}" HorizontalAlignment="Center">
            </TextBlock>
        </Border>
    </DataTemplate>

    <Style TargetType="{x:Type ListBoxItem}" x:Key="HomepageContainerStyle">

        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
        </Style.Resources>

        <Setter Property="ContentTemplate" Value="{DynamicResource HomepageItemTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{DynamicResource HomepageItemSelectedTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="SecureBrowserItemTemplate">
        <Grid Height="90" Width="131" Margin="0,5,10,10">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid Margin="0, 4, 0, 0" Grid.Row="0" Background="{DynamicResource WhiteColor}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>

                    <!--Visibility="{Binding ItemFavoriteIsVisible, Converter={StaticResource BoolToVisibility}, Mode=TwoWay}"-->
                    <Image x:Name="favoritesGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center"
                               HorizontalAlignment="Left" Margin="2,2,0,0" Height="15" Width="15">
                        <Image.InputBindings>
                            <MouseBinding MouseAction="LeftClick" 
                                              Command="{Binding DataContext.ItemFavoriteCommand, ElementName=ucSecureBrowser}"
                                              CommandParameter="{Binding ItemId}"/>
                        </Image.InputBindings>
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{DynamicResource imgStarList}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding ItemFavorite, Mode=TwoWay}" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <!--<Image x:Name="favoritesHoverGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center"
                               Height="15" Width="15"
                               HorizontalAlignment="Left" Visibility="{Binding ItemFavorite, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                               Source="{DynamicResource imgStarHoverList}" Margin="2,2,0,0">
                        <Image.InputBindings>
                            <MouseBinding MouseAction="LeftClick" 
                                              Command="{Binding DataContext.ItemFavoriteCommand, ElementName=ucSecureBrowser}"
                                              CommandParameter="{Binding ItemId}"/>
                        </Image.InputBindings>
                    </Image>-->

                    <Image x:Name="settingsGridImage" Grid.Column="2" Grid.Row="0" VerticalAlignment="Center"
                               HorizontalAlignment="Right" Height="15" Width="15"
                               Margin="0,2,2,0" Visibility="{Binding ItemSettingsIsVisible, Converter={StaticResource BoolToVisibility}, Mode=TwoWay}">
                        <Image.InputBindings>
                            <MouseBinding MouseAction="LeftClick" 
                                              Command="{Binding DataContext.ItemSettingsCommand, ElementName=ucSecureBrowser}"
                                              CommandParameter="{Binding ItemId}"/>

                        </Image.InputBindings>
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{DynamicResource imgSettingIcon}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgGearHover}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Image x:Name="itemGridImage" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3"
                               Stretch="Fill" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                               Source="{Binding ImagePath}" Margin="3" >
                        <Image.InputBindings>
                            <MouseBinding MouseAction="LeftClick" 
                                              Command="{Binding DataContext.ItemOpenHomepageItemCommand, ElementName=ucSecureBrowser}"
                                              CommandParameter="{Binding ItemId}"/>
                        </Image.InputBindings>
                    </Image>

                </Grid>
            </Grid>
        </Grid>
    </DataTemplate>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Slider for Password strength -->
    <Style x:Key="SliderStyle1" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}"/>
        <Setter Property="Template" Value="{DynamicResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--
    <Style x:Key="CustomDatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                <ContentControl x:Name="PART_Watermark" Focusable="True" IsHitTestVisible="False" Opacity="0" Padding="2" Foreground="{DynamicResource WatermarkLightGrayColor}" />
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style> -->

    <Style x:Key="CustomDatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="ContentElement"/>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="Transparent" BorderThickness="0"/>
                                <Border x:Name="watermark_decorator" BorderBrush="Transparent" BorderThickness="0">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Margin="1,0,0,0" Foreground="{DynamicResource WatermarkLightGrayColor}" />
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="{DynamicResource CustomDatePickerBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#E8E8E8" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Background="{DynamicResource CustomDatePickerBackground}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="0,0,0,0" 
                                    Grid.Row="0" VerticalAlignment="Top" Style="{DynamicResource NoHoverEffectButtonStyle}" Cursor="Hand">
                                <Image Width="15" Height="14" Source="{DynamicResource imgGreenCalendar}" ToolTip="{DynamicResource SelectDate}" />
                            </Button>
                            <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" 
                                               Grid.Row="0" VerticalContentAlignment="Stretch" Foreground="{DynamicResource AddItemTextForegroundColor}" FontSize="12" FontWeight="Normal"
                                               Background="{DynamicResource CustomDatePickerBackground}" CaretBrush="{DynamicResource BlackColor}" Style="{DynamicResource CustomDatePickerTextBoxStyle}"
                                               Padding="1,0,3,0" FontFamily="{DynamicResource ProximaRegular}" />
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0" Background="{DynamicResource CustomDatePickerBackground}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
                            <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="roundedcornerPasswordBox" TargetType="{x:Type PasswordBox}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Template for close maximise and minimise button -->
    <ControlTemplate x:Key="TopleftClosebtn" TargetType="{x:Type Button}">
        <Grid x:Name="bg">
            <Image x:Name="CloseImg" Source="{DynamicResource imgClosed}" Stretch="Fill" RenderOptions.BitmapScalingMode="HighQuality"
                   RenderOptions.EdgeMode="Aliased" HorizontalAlignment="Center" Margin="3,3,0,3"
                   VerticalAlignment="Top" ToolTip="{DynamicResource TitleBarClose}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" TargetName="CloseImg" Value="{DynamicResource imgClosedHover}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="TopleftMaxbtn" TargetType="{x:Type Button}">
        <Grid x:Name="bg">
            <Image x:Name="CloseImg" Source="{DynamicResource imgMaximise}" Stretch="Fill"
                   RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased"
                   ToolTip="{DynamicResource TitleBarMaximize}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" TargetName="CloseImg" Value="{DynamicResource imgMaximiseHover}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="TopleftMinbtn" TargetType="{x:Type Button}">
        <Grid x:Name="bg">
            <Image x:Name="CloseImg" Source="{DynamicResource imgMinimise}" Stretch="Fill"
                   RenderOptions.BitmapScalingMode="HighQuality" RenderOptions.EdgeMode="Aliased"
                   ToolTip="{DynamicResource TitleBarMinimize}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" TargetName="CloseImg" Value="{DynamicResource imgMinimiseHover}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SecurityScoreTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12.5"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="SecurityScoreTextBlockStyleForDynamicContent" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource SecurityScoreDynamicContentColor}"/>
    </Style>

    <Style x:Key="SecureShareSemiboldStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}"/>
    </Style>

    <Style x:Key="SecureShareLightFontStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaLight}"/>
    </Style>

    <Style x:Key="SecureShareRegularFontStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
    </Style>

    <Style x:Key="CancelButton_style" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossGreenColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="13" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource PasswordBossGreenHoverColor}"/>
                            <Setter Property="Foreground" Value="#05D2A7"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AddcontrolTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="TextTrimming" Value="None"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="CustomScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="PanningMode" Value="Both" />
        <Setter Property="Template" Value="{DynamicResource CustomScrollViewerTemplate}" />
    </Style>

    <!-- Custom scroll viewer -->
    <ControlTemplate x:Key="CustomScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1"
                           Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1" />
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                        CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                        ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Row="0"
                                        Content="{TemplateBinding Content}" Grid.RowSpan="2"
                                        Margin="{TemplateBinding Padding}" Grid.ColumnSpan="2" />
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar"
                           Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0"
                           Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                           Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                           ViewportSize="{TemplateBinding ViewportHeight}"
                           Style="{DynamicResource CustomScrollBarTemplate}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0"
                           Orientation="Horizontal" Grid.Row="1"
                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                           Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                           ViewportSize="{TemplateBinding ViewportWidth}" Height="8" />
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type GroupItem}" x:Key="ListViewGroupStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <TextBlock Text="{Binding Name}" Style="{DynamicResource TextBlockCategoryHead}" Margin="15,15,0,0" />
                        <ItemsPresenter />
                    </StackPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Scrollbar Thumbs-->
    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Border x:Name="Rectangle1" CornerRadius="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomScrollBarTemplate" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#CECDD5" />
        <Setter Property="Background" Value="DarkGray" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="8" Background="#E7E6EB">
                        <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false"
                                   Width="5">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                              Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                              Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter Value="#868686" TargetName="Thumb" Property="Background" />
                            <Setter Value="9" TargetName="PART_Track" Property="Width" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NotesTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="MaxLines" Value="3"/>
        <Setter Property="MinLines" Value="3"/>
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template" Value="{DynamicResource RoundedTextBoxTemplate}"/>
        <Setter Property="MaxLength" Value="300"/>
    </Style>

    <ControlTemplate x:Key="RoundedTextBoxTemplate" TargetType="{x:Type TextBoxBase}">
        <Border Background="{TemplateBinding Background}" 
                x:Name="Bd" BorderBrush="{DynamicResource TextBoxBackground}"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
            <ScrollViewer x:Name="PART_ContentHost" Template="{DynamicResource CustomScrollViewerTemplate}" />
        </Border>
    </ControlTemplate>

    <Style x:Key="AddControlTextBoxStyle" TargetType="{x:Type TextBox}">

        <Setter Property="Height" Value="20"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="MaxLines" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource CustomDatePickerBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#E8E8E8" />

        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Border BorderBrush="{DynamicResource PasswordBossGreenColor}" BorderThickness="0,0,3,0" CornerRadius="2">
                            <AdornedElementPlaceholder/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip"
                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                    Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AddControlTextBoxStyleAccountSettings" TargetType="{x:Type TextBox}" BasedOn="{StaticResource AddControlTextBoxStyle}">
        <Setter Property="Template" Value="{DynamicResource AddControlTextboxTemplate}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="3,1,3,0"/>
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AddControlPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="Padding" Value="3,3,3,3"/>
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Border BorderBrush="{DynamicResource PasswordBossGreenColor}" BorderThickness="0,0,3,0" CornerRadius="2">
                            <AdornedElementPlaceholder/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip"
                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                    Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AddControlComboboxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template" Value="{DynamicResource ComboBoxControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="Background" Value="{DynamicResource CustomDatePickerBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="20"/>
    </Style>

    <ControlTemplate x:Key="ComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
        <Border CornerRadius="2" BorderThickness="1" BorderBrush="#E8E8E8">
            <Grid Background="{DynamicResource TextBoxBackground}">
                <Grid x:Name="ComboBoxMainGrid">
                    <ToggleButton  x:Name="ToggleButton" BorderThickness="0"  
        				Background="{TemplateBinding Background}" 
        				Foreground="{TemplateBinding Foreground}"        				
        				Focusable="false" 
        				IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
        				ClickMode="Press" Canvas.ZIndex="1"
                        Style="{DynamicResource ToggleButtonStyleForadditemdropdown}"
                        VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch"/>
                    <ContentPresenter 
        				x:Name="ContentSite"                                
        				IsHitTestVisible="False"
        				Content="{TemplateBinding SelectionBoxItem}"
        				ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
        				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
        			    Margin="3,3,3,3"                    
        				HorizontalAlignment="Left" Canvas.ZIndex="1"  />
                    <TextBox x:Name="PART_EditableTextBox"
                        Background="Transparent" BorderThickness="0"
        				Style="{x:Null}"    
        				HorizontalAlignment="Left"        				
                        VerticalContentAlignment="Center"
        				Padding="0,0,0,0"
        				Focusable="True"                               
        				Visibility="Hidden"
        				IsReadOnly="{TemplateBinding IsReadOnly}" Canvas.ZIndex="1"/>
                    <Rectangle Margin="0,0,23,0"  Width="0.6" Fill="LightGray" HorizontalAlignment="Right" Canvas.ZIndex="1"/>
                    <Image x:Name="Arrow" Height="5" Width="8" Source="{DynamicResource imgDownArrow1}" HorizontalAlignment="Right" Margin="0,0,7,0" />
                </Grid>

                <Popup       Name="Popup"
                             Placement="Relative"
                             IsOpen="{TemplateBinding IsDropDownOpen}"
                             AllowsTransparency="True"
                             Focusable="False" PlacementRectangle="-2,25,0,0"
                             PopupAnimation="None" Margin="0,0,0,0" >
                    <Border  Margin="0,0,0,0" BorderThickness="2 1 2 1" CornerRadius="2"
                             BorderBrush="{DynamicResource TextboxBorderbrush}" Background="{DynamicResource WhiteColor}" >
                        <Grid  Margin="0,1,0,0"
                                  Name="DropDown" 
                                  SnapsToDevicePixels="True"               
                                  Width="{Binding ElementName=ComboBoxMainGrid, Path=ActualWidth}"
                                  MinHeight="{TemplateBinding ActualHeight }"
                                  MaxHeight="160">
                            <ScrollViewer Margin="0,0,0,0" SnapsToDevicePixels="True" Template="{DynamicResource CustomScrollViewerTemplate}" VerticalScrollBarVisibility="Auto" >
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Margin="0,0,0,0" />
                            </ScrollViewer>
                        </Grid>

                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter TargetName="Arrow" Property="Image.Source" Value="{DynamicResource imgUpArrow}" />
                <Setter Property="Foreground" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
            </Trigger>

            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{DynamicResource TransparentColor}"/>

            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{DynamicResource TransparentColor}"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{DynamicResource TransparentColor}"/>

            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{DynamicResource TransparentColor}"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ToggleButton" Property="ToggleButton.Background" Value="{DynamicResource TransparentColor}"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="AddControlTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True"  Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom scroll viewer -->
    <ControlTemplate x:Key="SecurityScoreListViewTemplate" TargetType="{x:Type ListView}">
        <ScrollViewer Style="{DynamicResource CustomScrollViewerStyle}">
            <ItemsPresenter />
        </ScrollViewer>
    </ControlTemplate>

    <ControlTemplate x:Key="SecurityScoreTreeViewTemplate" TargetType="{x:Type telerik:RadTreeView}">
        <ScrollViewer Style="{DynamicResource CustomScrollViewerStyle}">
            <Grid>                
                <ItemsPresenter />
            </Grid>
        </ScrollViewer>
    </ControlTemplate>

    <Style x:Key="SecureShareListViewStyle" TargetType="ListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border x:Name="border" Background="Transparent" BorderThickness="0">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border"
                                                              Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="Transparent" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border"
                                                              Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="Transparent" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="AddControlPasswordBoxTemplate" TargetType="{x:Type PasswordBox}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DigitalWalletCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource PasswordProgressGrayColor}"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Height="10" Width="10" Background="{DynamicResource DigitalWalletGrayCheckboxColor}">
                                <Path x:Name="optionMark" Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z" Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="0" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="2" Opacity="0" Height="5" Width="5"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3 2 0 0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="5,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            <Setter Property="Background" TargetName="markGrid" Value="{DynamicResource DigitalWalletCheckedToggleButtonColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordProgressBarSetup" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossGreenColor}"/>
        <Setter Property="Background" Value="{DynamicResource LightGrayTextForegroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ProductTourGrayColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="True"  HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" RadiusX="0" RadiusY="0" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" RadiusX="0" RadiusY="0" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SetupProgressProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossGreenColor}"/>
        <Setter Property="Background" Value="{DynamicResource LightGrayTextForegroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ProductTourGrayColor}"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="5" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <Border x:Name="PART_Track" CornerRadius="5" />

                        <Border x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left" Margin="0,0,0,0" CornerRadius="5">
                            <Grid>

                                <Border x:Name="Indicator" Background="{TemplateBinding Foreground}">
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="CornerRadius" Value="5,0,0,5"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ProgressBar}}}" Value="100">
                                                    <Setter Property="CornerRadius" Value="5"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                </Border>
                                <Border x:Name="Animation" RenderTransformOrigin="0.5,0.5" CornerRadius="5" />
                            </Grid>
                        </Border>
                        <!--<Rectangle x:Name="Indicator" RadiusX="0" RadiusY="0" Fill="{TemplateBinding Foreground}" />
                        <Rectangle x:Name="Animation" RadiusX="0" RadiusY="0" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>-->

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Source" Value="{DynamicResource imgFile}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource imgFileHover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClearDateImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Source" Value="{DynamicResource imgClearDate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource imgClearDateHover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AddCategoryImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Source" Value="{DynamicResource imgAddCategory}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource imgAddCategoryHover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordGeneratorImageStyle" TargetType="{x:Type Image}">
        <Setter Property="Source" Value="{DynamicResource imgNewItemPasswordGenerator}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource imgNewItemPasswordGeneratorHover}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="MiniTourNextButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,0,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossGreenHoverColor}" TargetName="border"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListViewItem" x:Key="PasswordGeneratorHistoryListItemStyle">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="Foreground" Value="#75797A" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#6C7779"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#6C7779" />
        </Style.Resources>
    </Style>


    <ControlTemplate x:Key="AddControlTextboxTemplate" TargetType="{x:Type TextBoxBase}">
        <Border x:Name="border" BorderBrush="{DynamicResource TextboxBorderbrush}" CornerRadius="2"  BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
            <ScrollViewer x:Name="PART_ContentHost"  Focusable="False" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden" Height="20" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False" />
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextboxBorderbrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextboxBorderbrush}"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Image}">
        <Setter Property="RenderOptions.BitmapScalingMode"
                Value="HighQuality" />
        <Setter Property="RenderOptions.EdgeMode"
                Value="Aliased" />
    </Style>

    <!--Select Language Combobox ToggleButton Style-->
    <Style x:Key="ToggleButtonStyleForadditemdropdown" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockCategoryHead" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="TextTrimming" Value="None" />
        <Setter Property="Foreground" Value="{DynamicResource BlackColor}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Margin" Value="5,5,0,5" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
    </Style>

    <Style x:Key="PopupWindowHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="TextTrimming" Value="None" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="20pt" />
        <Setter Property="Margin" Value="5,5,0,5" />
        <Setter Property="FontFamily" Value="Helvetica, Arial" />
        <Setter Property="Foreground" Value="#e7f8ff" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
    </Style>

    <Style x:Key="TextBlockDigitalWalletAddControl" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="TextTrimming" Value="None" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ImageStyleSharp" TargetType="{x:Type Image}">
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
        <Setter Property="Stretch" Value="Fill" />
    </Style>

    <Style x:Key="PasswordVaultIconsStyle" TargetType="{x:Type Image}">
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
        <Setter Property="Height" Value="61" />
        <Setter Property="Width" Value="61" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ShowHideToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="filledcheckboxstyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Background="{DynamicResource DigitalWalletGrayCheckboxColor}">
                                <Path x:Name="optionMark"
                                      Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                                      Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="1" Opacity="0" Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="0" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" Grid.Column="1"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="5,0,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True"
                                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                               StrokeThickness="1" StrokeDashArray="1 2" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource DialogGrayColor}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                            <Setter Property="Background" TargetName="markGrid" Value="{DynamicResource DigitalWalletCheckedToggleButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="roundButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="12" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenHoverColor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="roundAddButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle UseLayoutRounding="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource RoundButtonGrayColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource RoundButtonGrayColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="12" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextboxBorderbrush}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource RoundButtonGrayColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource RoundButtonGrayColor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="roundShareCentarButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle UseLayoutRounding="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource TextboxBorderbrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource RoundButtonGrayColor}" />
        <Setter Property="Foreground" Value="{DynamicResource RoundButtonGrayColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="12" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource RoundButtonGrayColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource RoundButtonGrayColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="roundToggleButtonNoBorder" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="1.8" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" CornerRadius="12" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="FontFamily" Value="{DynamicResource semibold}" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True" />

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextForegroundcolor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="1.5" />
                            <Setter Property="FontFamily" Value="{DynamicResource semibold}" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextForegroundcolor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="1.5" />
                            <Setter Property="FontFamily" Value="{DynamicResource semibold}" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource WhiteColor}" TargetName="contentPresenter" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SecurityTabButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource SettingsTextLableForeground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Image x:Name="selected" HorizontalAlignment="Right"
                               Source="{DynamicResource imgArrow2}" Height="12" Width="10"
                               Margin="0,0,20,0" Opacity="1" />
                        <Image x:Name="nonselected" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right"
                               Source="{DynamicResource imgArrow1}" Height="12" Width="10"
                               Margin="0,0,20,0" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="false">
                            <Setter Property="Background" TargetName="border" Value="Transparent" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource SettingsTextLableForeground}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SettingsGreenColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SettingsGreenColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Opacity" TargetName="nonselected" Value="1" />
                            <Setter Property="Opacity" TargetName="selected" Value="0" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="ToggleButton.IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SettingsGreenColor}" />
                            <Setter Property="Opacity" TargetName="nonselected" Value="1" />
                            <Setter Property="Opacity" TargetName="selected" Value="0" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusVisualCustomStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFF" />
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#707070" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#D9ECFF" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#3C77DD" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#E5E5E5" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#BCBCBC" />


    <SolidColorBrush x:Key="Button.Static.Background" Color="#00D1A6" />
    <SolidColorBrush x:Key="Button.Static.Border" Color="#707070" />
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#BEE6FD" />
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#3C7FB1" />
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#C4E5F6" />
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#2C628B" />
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#F4F4F4" />
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#ADB2B5" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#838383" />

    <Style x:Key="AutoLockRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualCustomStyle}" />
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2" Height="18" Width="18">
                            </Grid>
                        </Border>-->
                        <Ellipse x:Name="ellipse"  Width="18" Height="18"  Fill="{DynamicResource LightGrayTextForegroundColor}"/>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ellipse"
                                    Value="{StaticResource RadioButton.Disabled.Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="ellipse"
                                    Value="{StaticResource RadioButton.Pressed.Background}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="ellipse" Value="{StaticResource SettingsGreenColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnStyleNormal" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="PasswordBoxControlTemplate1" TargetType="{x:Type PasswordBox}">
        <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush
                    EndPoint="1,0"
                    StartPoint="0,0">
                    <GradientStop Color="Black"
                                  Offset="0" />
                    <GradientStop Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"
                                  Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                            Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                            Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" RadiusX="5" RadiusY="5" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" RadiusX="5" RadiusY="5" Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--code textbox style with placeholder text-->
    <Style x:Key="CodeTextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Text="{DynamicResource EnterCode}"
                                       Foreground="{DynamicResource CheckBoxReadAcceptBorderbrush}"
                                       Visibility="Visible" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize17}" Padding="10,0,0,0" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Email textbox Style -->
    <Style x:Key="EmailTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,0,8,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#7E8A8E" />
        <Setter Property="FontFamily" Value="{DynamicResource OBProximaRegular}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize17}" />
        <Setter Property="CaretBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="5"
                            Background="White"
                            BorderThickness="1"
                            BorderBrush="#D2D2D2"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextBlock.Text" Value="" />
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Email text box Without placeholder text-->
    <Style x:Key="TextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,0,8,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Verification textbox with placeholder-->
    <Style x:Key="VerificationTextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,0,8,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Text="{DynamicResource EnterVerificationCode}"
                                       Foreground="{DynamicResource CheckBoxReadAcceptBorderbrush}"
                                       Visibility="Visible" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize17}" Padding="10,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextBlock.Text" Value="" />
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- passwordbox style without placeholder text -->
    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="Padding" Value="8,0,8,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#7E8A8E" />
        <Setter Property="FontFamily" Value="{DynamicResource OBProximaRegular}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize17}" />
        <Setter Property="CaretBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" CornerRadius="5"
                            Background="White"
                            BorderThickness="1"
                            BorderBrush="#D2D2D2"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter Property="Background" TargetName="border" Value="#F8CDCD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#EC2F2F" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="1">
                            <Setter Property="Background" TargetName="border" Value="#BCE7DE" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#14D4AC" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="2">
                            <Setter Property="Background" TargetName="border" Value="White" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#D2D2D2" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsPasswordAllowed}" Value="false">
                            <Setter Property="Background" TargetName="border" Value="#F8CDCD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#EC2F2F" />
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextBlock.Text" Value="" />
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordBoxPlaceHolderStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,0,8,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#7E8A8E" />
        <Setter Property="FontFamily" Value="{DynamicResource OBProximaRegular}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize17}" />
        <Setter Property="CaretBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" CornerRadius="5"
                            Background="White"
                            BorderThickness="1"
                            BorderBrush="#D2D2D2"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter Property="Background" TargetName="border" Value="#F8CDCD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#EC2F2F" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="1">
                            <Setter Property="Background" TargetName="border" Value="#BCE7DE" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#14D4AC" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="2">
                            <Setter Property="Background" TargetName="border" Value="White" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#D2D2D2" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsPasswordAllowed}" Value="false">
                            <Setter Property="Background" TargetName="border" Value="#F8CDCD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#EC2F2F" />
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextBlock.Text" Value="" />
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- passwordbox style-->
    <Style x:Key="PasswordBoxEnterPasswordStyle"
           TargetType="{x:Type PasswordBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Text="{DynamicResource MasterPassword}"
                                       Foreground="{DynamicResource CheckBoxReadAcceptBorderbrush}"
                                       Visibility="Visible" VerticalAlignment="Center"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize17}" Padding="10,0,0,0"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}">
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextBlock.Text" Value="" />
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Password Vault recommended item style -->
    <Style x:Key="ItemBtnRecommendedSiteStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Canvas.ZIndex="1" x:Name="contentPresenter" Grid.Row="0"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Border Canvas.ZIndex="0" Name="overimage" Height="95" Width="140" Grid.Row="0"
                                    Grid.ColumnSpan="2" CornerRadius="3 3 3 3" Background="{DynamicResource PasswordBossGreenColor}"
                                    Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{DynamicResource imgAddHover}" Height="38" Width="38"
                                           Margin="0,5,0,0" />
                                    <TextBlock Text="{DynamicResource AddPasswordHoverText}" Foreground="{DynamicResource WhiteColor}"
                                               FontWeight="SemiBold" FontFamily="{DynamicResource ProximaSemiBold}"
                                               FontSize="13.5" Margin="0,10,0,0" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="2" />
                            <Setter Property="CornerRadius" TargetName="border" Value="3 3 3 3" />
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0" />
                            <Setter Property="Visibility" TargetName="overimage" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Digital Wallet recommended item style -->
    <Style x:Key="DigitalWalletRecommendedGridItemStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Canvas.ZIndex="1" x:Name="contentPresenter" Grid.Row="0"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Border Canvas.ZIndex="0" Name="overimage" Height="95" Width="140" Grid.Row="0"
                                    Grid.ColumnSpan="2" CornerRadius="3 3 3 3" Background="{DynamicResource PasswordBossGreenColor}"
                                    Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Image Source="{DynamicResource imgAddHover}" Height="38" Width="38"
                                           Margin="0,5,0,0" />
                                    <TextBlock Text="{DynamicResource Add}" Foreground="{DynamicResource WhiteColor}"
                                               FontWeight="SemiBold" FontFamily="{DynamicResource ProximaSemiBold}"
                                               FontSize="13.5" Margin="0,10,0,0" HorizontalAlignment="Center" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="2" />
                            <Setter Property="CornerRadius" TargetName="border" Value="3 3 3 3" />
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0" />
                            <Setter Property="Visibility" TargetName="overimage" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Password Vault button style -->
    <Style x:Key="ItemBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3 3 3 3" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Canvas.ZIndex="1" x:Name="contentPresenter" Grid.Row="0"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Border Canvas.ZIndex="0" Name="overimage" Height="70" Width="135" Grid.Row="1"
                                    Grid.ColumnSpan="2" CornerRadius="3,3,3,3"
                                    Background="{DynamicResource PasswordBossGreenColor}" Visibility="Collapsed" HorizontalAlignment="Center"
                                    VerticalAlignment="Top" Margin="0,0,0,0">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"
                                            Background="Transparent">
                                    <TextBlock Text="{DynamicResource DoubleClickToOpenSite}" Foreground="{DynamicResource WhiteColor}"
                                               FontSize="13.5" FontWeight="SemiBold"
                                               FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,20,0,20"
                                               TextWrapping="Wrap" Width="100" TextAlignment="Center" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="CornerRadius" TargetName="border" Value="3 3 3 3" />
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.2" />
                            <Setter Property="Visibility" TargetName="overimage" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Digital Wallet and Personal Info button style -->
    <Style x:Key="DigitalWalletPersonalInfoButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3 3 3 3" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Canvas.ZIndex="1" x:Name="contentPresenter" Grid.Row="0"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Border Canvas.ZIndex="0" Name="overimage" Height="70" Width="135" Grid.Row="1"
                                    Grid.ColumnSpan="2" CornerRadius="3,3,3,3"
                                    Background="{DynamicResource PasswordBossGreenColor}" Visibility="Collapsed" HorizontalAlignment="Center"
                                    VerticalAlignment="Top" Margin="0,0,0,0">
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"
                                            Background="Transparent">
                                    <TextBlock Text="{DynamicResource DoubleClickToOpenItem}" Foreground="{DynamicResource WhiteColor}"
                                               FontSize="13.5" FontWeight="SemiBold"
                                               FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,20,0,20"
                                               TextWrapping="Wrap" Width="100" TextAlignment="Center" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="CornerRadius" TargetName="border" Value="3 3 3 3" />
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.2" />
                            <Setter Property="Visibility" TargetName="overimage" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- for item button -->
    <Style x:Key="NormalbuttonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3 3 3 3" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Canvas.ZIndex="1" x:Name="contentPresenter" Grid.Row="0"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="CornerRadius" TargetName="border" Value="3 3 3 3" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="#FFACACAC" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True"
                                  Margin="0,0,0,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1"
                                KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                              Content="{TemplateBinding SelectedContent}"
                                              ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                              ContentSource="SelectedContent" Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SignInButtonStyleGray" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="18" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Login page Signin button Style-->
    <Style x:Key="SignInButtonStyleRed" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="18" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="5,0,5,0"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossRedHoverColor}" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Login page Signin button Style-->
    <Style x:Key="SignInButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="18" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PasswordBossGreenHoverColor}" TargetName="border"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTextboxNormalStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border"  
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                        <Grid Background="Transparent">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Text="{DynamicResource Search}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Visibility="Visible" VerticalAlignment="Center" TextAlignment="Left"
                                       FontWeight="Normal" FontFamily="{DynamicResource ProximaRegular}"
                                       x:Name="txtPrompt" FontSize="{DynamicResource FontSize14}" Padding="2,2,10,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource DialogGrayColor}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource DialogGrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTextboxGotFocusStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" BorderThickness="0"
                            SnapsToDevicePixels="true">
                        <Grid Background="Transparent">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource DialogGrayColor}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource DialogGrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DigitalWalletCategoryButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource SecureBrowserLightGrayBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecureBrowserLightGrayBackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetNewPasswordRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource TransparentColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TransparentColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="{DynamicResource TransparentColor}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0" Background="{DynamicResource TransparentColor}" CornerRadius="100"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Background="{DynamicResource TransparentColor}">
                                <Image x:Name="Offmark" Source="{DynamicResource imgRadioUntick}" Height="7"
                                       Width="7" Opacity="1" Margin="0,2,0,0" />
                                <Image x:Name="optionMark" Source="{DynamicResource imgAccountSettingsTick}" Height="10" Margin="0,1,0,0"
                                       Width="10" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="1,0,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                    Value="{DynamicResource RadioButtonBackground}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="Offmark" Value="0" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{DynamicResource TextForegroundcolor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="Offmark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EnterPINStyle" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Text="Enter PIN" Canvas.ZIndex="1"
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0" />
                            <TextBlock Text="{TemplateBinding Tag}" Canvas.ZIndex="1"
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       VerticalAlignment="Bottom" FontSize="20" FontWeight="Normal"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPwdChars" Padding="15,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ShareActionButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundcolor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="./resources/fonts/#ProximaNova-Regular" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextBoxBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextForegroundcolor}" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{DynamicResource TextForegroundcolor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStylefor_header" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0" Background="{TemplateBinding Background}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Height="10" Width="10" Background="{DynamicResource DigitalWalletGrayCheckboxColor}">
                                <Path x:Name="optionMark"
                                          Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                                          Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="0" Opacity="0" Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource PasswordBossBlackBackgroundColor}" Margin="2" Opacity="0"
                                               Height="5" Width="5" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}" Grid.Column="1"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True"
                                                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                                   StrokeThickness="1" StrokeDashArray="1 2" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="5,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF5593FF" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource DialogGrayColor}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                            <Setter Property="Background" TargetName="markGrid" Value="{DynamicResource DigitalWalletCheckedToggleButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="roundButtonHeight34" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="18" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenHoverColor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImportPasswordCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,100,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Height="13" Width="13" Background="{DynamicResource DigitalWalletGrayCheckboxColor}">
                                <Path x:Name="optionMark"
                                      Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                                      Fill="{DynamicResource PasswordBossBlackBackgroundColor}"
                                      Margin="0" Opacity="0" Stretch="None" HorizontalAlignment="Center"
                                      VerticalAlignment="Center" />
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource TextboxBorderbrush}" Margin="2" Opacity="0" Height="13"
                                           Width="13" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" Grid.Column="1"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="16,0,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center" Width="Auto" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True"
                                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                               StrokeThickness="1" StrokeDashArray="1 2" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF5593FF" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource DialogGrayColor}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                            <Setter Property="Background" TargetName="markGrid" Value="{DynamicResource DigitalWalletCheckedToggleButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AddPasswordAutomaticallyComboboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource AddPasswordsAutomaticallyComboboxColor}" />
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"
                                BorderThickness="2" Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Height="15" Width="15" Background="Transparent">
                                <!--<Path x:Name="optionMark" Data="M14.949071,1.7312983 L7.041139,12.876175 6.7763863,12.876175 0,7.3496889 1.9132451,4.9839181 6.3767844,8.6163413 12.488772,2.1594597E-05 14.949071,1.7312983 z" Fill="#00c49c"
                                      Margin="0.5,0,0,0" Opacity="0" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"   RenderTransformOrigin="0.7,0.7" />-->
                                <Image x:Name="optionMark" HorizontalAlignment="Right" VerticalAlignment="Center"
                                       Source="{DynamicResource imgTik}" Width="14" Height="12" Visibility="Collapsed" />
                                <Rectangle x:Name="indeterminateMark" Fill="Transparent" Margin="2" Opacity="0"
                                           Height="15" Width="15" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" Grid.Column="1"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="16,0,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True"
                                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                               StrokeThickness="1" StrokeDashArray="1 2" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="5,1,0,0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="optionMark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="optionMark" Value="Collapsed" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainProgressVisibilityStyle" TargetType="{x:Type Grid}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SetupWizardProgress}" Value="100" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Setter Property="Height" Value="0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SetupWizardMenuTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossRedColor}"/>
        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SetupWizardProgress}" Value="100" />

                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SetupWizardComboboxCustomStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource AddPasswordsAutomaticallyComboboxColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"
                                BorderThickness="0" Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Height="15" Width="15" Background="Transparent">
                                <Image x:Name="optionMark" HorizontalAlignment="Right" VerticalAlignment="Center"
                                       Source="{DynamicResource imgTik}" Width="14" Height="12" Visibility="Collapsed" />
                                <Rectangle x:Name="indeterminateMark" Fill="Transparent" Margin="2" Opacity="0"
                                           Height="15" Width="15" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" Grid.Column="1"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="9,2,0,0" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True"
                                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                               StrokeThickness="1" StrokeDashArray="1 2" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="5,1,0,0" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="optionMark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="optionMark" Value="Collapsed" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WizardBackButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Background" Value="{DynamicResource LightGrayTextForegroundColor}" />-->
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="20,0,0,0" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="15" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenHoverColor}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WizardNextButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,20,0" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="15" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenHoverColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ADDBrowserExtnButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="15"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <TextBlock Name="ADDtext" Text="{DynamicResource EnableUppercase}" FontSize="14" Foreground="{DynamicResource WhiteColor}" FontWeight="Bold"
                                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,1" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossRedColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource WhiteColor}" />
                            <Setter TargetName="ADDtext" Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardPIFirstName" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource FirstName}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                            <Image x:Name="okTik" Source="{DynamicResource imgTik}" HorizontalAlignment="Right" Width="16" Height="14" Margin="0 0 5 0" Visibility="Hidden"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding FirstNameIsOK}" Value="True">
                            <Setter TargetName="okTik" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ErrorFirstNameVisibility}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossRedColor}" />
                                <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                                <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                                <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource PasswordBossRedColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">

                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                            <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource LightGrayTextForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>


        </Setter>


    </Style>

    <Style x:Key="SetupWizardPILastName" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource LastName}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                            <Image x:Name="okTik" Source="{DynamicResource imgTik}" HorizontalAlignment="Right" Width="16" Height="14" Margin="0 0 5 0" Visibility="Hidden"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding LastNameIsOK}" Value="True">
                            <Setter TargetName="okTik" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ErrorLastNameVisibility}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossRedColor}" />
                                <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                                <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                                <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource PasswordBossRedColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardPIAddressNickname" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource AddressNickname}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardPIAddress1" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource Address1}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                            <Image x:Name="okTik" Source="{DynamicResource imgTik}" HorizontalAlignment="Right" Width="16" Height="14" Margin="0 0 5 0" Visibility="Hidden"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Address1IsOK}" Value="True">
                            <Setter TargetName="okTik" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ErrorAddress1Visibility}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossRedColor}" />
                                <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                                <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                                <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource PasswordBossRedColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardPIAddress2" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource Address2}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardPICity" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource City}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardPIState" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource State}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardPIZipCode" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource ZipCodeWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardPVUsername" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource Username}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardPVPassword" TargetType="{x:Type PasswordBox}">

        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type PasswordBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource Password}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Visible" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardComboboxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource LocationComboboxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaLight}" />
        <Setter Property="Padding" Value="0,10,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Width" Value="140" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderThickness="1" CornerRadius="3" Background="{DynamicResource TextBoxBackground}"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            x:Name="mainBorder">
                        <Grid x:Name="combogrid" Background="{DynamicResource TextBoxBackground}">
                            <ToggleButton
                                Name="ToggleButton" Background="{DynamicResource WhiteColor}"
                                Foreground="{DynamicResource LightGrayTextForegroundColor}"
                                Grid.Column="2" Margin="0" VerticalContentAlignment="Center"
                                Focusable="false" BorderThickness="0"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press" Style="{DynamicResource ToggleButtonStyleForadditemdropdown}"
                                Canvas.ZIndex="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="15,1,0,0"
                                HorizontalAlignment="Left" VerticalAlignment="Center" />
                            <TextBlock x:Name="PART_EditableTextBox"
                                       Style="{x:Null}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Center" FontFamily="{DynamicResource ProximaRegular}"
                                       Focusable="True" FontSize="12"
                                       Visibility="Visible" Padding="0,0,0,0"
                                       Background="{DynamicResource WhiteColor}"
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" />
                            <Border BorderThickness="1,0,0,0" BorderBrush="{DynamicResource TextboxBorderbrush}" Width="40" HorizontalAlignment="Right" Margin="5,0,0,0">
                                <Image x:Name="Arrow" HorizontalAlignment="Right" Margin="0,2,13,0"
                                   VerticalAlignment="Center" Source="{DynamicResource imgGreenArrowDown}"
                                   Height="8" Width="13" />
                            </Border>
                            <Popup
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False" PlacementRectangle="-2,27,0,0"
                                PopupAnimation="None" Margin="0,0,0,0">
                                <Border Margin="0,3,0,0" BorderThickness="1" CornerRadius="0"
                                        BorderBrush="{DynamicResource TextboxBorderbrush}" Background="{DynamicResource WhiteColor}">
                                    <Grid Margin="0,1,0,0" Height="160"
                                          Name="DropDown"
                                          SnapsToDevicePixels="True"
                                          MinWidth="{TemplateBinding ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border
                                            x:Name="DropDownBorder"
                                            Background="{DynamicResource TransparentColor}"
                                            BorderThickness="0"
                                            BorderBrush="{DynamicResource GrayColor}" Margin="0,0,0,0" />
                                        <ScrollViewer Margin="0,0,0,2" SnapsToDevicePixels="True" Template="{DynamicResource CustomScrollViewerTemplate}" VerticalScrollBarVisibility="Auto">
                                            <StackPanel IsItemsHost="True"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        Margin="0,0,0,0" />
                                        </ScrollViewer>
                                    </Grid>

                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="2" />
                            <Setter Property="Background" TargetName="combogrid" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Arrow" Property="Image.Source" Value="{DynamicResource imgGreenArrowUp}" />
                            <Setter Property="Foreground" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Setter Property="Background" TargetName="combogrid" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="2" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="SubmitButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="1.5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,1,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="18" BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextForegroundcolor}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource PasswordBossRedColor}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="0" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource TextForegroundcolor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Alert popup list data template-->
    <DataTemplate x:Key="AlertListDataTemplate">
        <Grid Grid.Row="1" Background="{DynamicResource AlertsAndNotificationsBackgroundColor}" Margin="0,4,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="11" />
                <ColumnDefinition />
                <ColumnDefinition Width="11" />
                <ColumnDefinition Width="150" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition />
                <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="10" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
            </Grid.RowDefinitions>
            <Image Grid.Column="1" Grid.Row="1" Source="{Binding alertImage}" HorizontalAlignment="Center"
                   VerticalAlignment="Center" Width="{Binding icon_width}" Height="{Binding icon_height}">
                <Image.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=AlertList,Path=DataContext.AlertItemClickCommand}"
                                  CommandParameter="{Binding }" />
                </Image.InputBindings>
            </Image>
            <Grid Grid.Column="3" Grid.Row="1">
                <Grid.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=AlertList,Path=DataContext.AlertItemClickCommand}"
                                  CommandParameter="{Binding }" />
                </Grid.InputBindings>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="4" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="4" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0" Text="{Binding siteName}" FontSize="13" Foreground="{DynamicResource PasswordBossBlackBackgroundColor}"
                           FontWeight="SemiBold"
                           FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,0,0,0" />
                <TextBlock Grid.Row="1" Text="{Binding email}" FontSize="13" Foreground="{DynamicResource LightGrayTextForegroundColor}" FontWeight="Light"
                           FontFamily="{DynamicResource ProximaLight}" Margin="0,4,0,0"
                           Visibility="{Binding visible, Converter={StaticResource BoolToVisibility}}" />
                <TextBlock Grid.Row="3" Text="{Binding status}" FontSize="13" Foreground="{DynamicResource LightGrayTextForegroundColor}" FontWeight="Light"
                           FontFamily="{DynamicResource ProximaLight}" Margin="0,0,0,0" />
                <TextBlock Grid.Row="5" FontWeight="Light" FontSize="11" Foreground="{DynamicResource PasswordBossBlackBackgroundColor}"
                           FontFamily="{DynamicResource ProximaLight}" Margin="0,0,0,0">
                    <Run Text="{Binding AlertNotification.ModifiedAgo}" />
                </TextBlock>

            </Grid>
            <Image Grid.Column="5" Grid.Row="1" Height="10" Width="10" Source="{DynamicResource imgCloseAlert}"
                   HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=AlertList,Path=DataContext.AlertCloseCommand}"
                                  CommandParameter="{Binding }" />
                </Image.InputBindings>
                <Image.Style>
                    <Style TargetType="Image">
                        <Setter Property="Visibility" Value="Visible"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsHistory}" Value="True">
                                <Setter Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>
    </DataTemplate>

    <!-- Alert popup list data template-->
    <DataTemplate x:Key="SecurityNotificationTemplate">
        <Grid Grid.Row="1" Background="{DynamicResource AlertsAndNotificationsBackgroundColor}" Margin="0,4,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="22" />
                <ColumnDefinition />
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="190" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition />
                <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="10" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
            </Grid.RowDefinitions>
            <Image Grid.Column="1" Grid.Row="1" Source="{Binding alertImage}" HorizontalAlignment="Center"
                   VerticalAlignment="Center" Width="21" Height="18">
                <Image.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=SecurityNotificationList,Path=DataContext.NotificationItemClickCommand}"
                                  CommandParameter="{Binding }" />
                </Image.InputBindings>
            </Image>
            <Grid Grid.Column="3" Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="4" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="4" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=SecurityNotificationList,Path=DataContext.NotificationItemClickCommand}"
                                  CommandParameter="{Binding }" />
                </Grid.InputBindings>
                <TextBlock Grid.Row="0" Text="{Binding siteName}" FontSize="13" Foreground="{DynamicResource PasswordBossBlackBackgroundColor}"
                           FontWeight="SemiBold"
                           FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,0,0,0" />

                <TextBlock Grid.Row="2" Text="{Binding status}" FontSize="13" Foreground="{DynamicResource LightGrayTextForegroundColor}" FontWeight="Light"  TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaLight}" Margin="0,0,0,0" />
                <TextBlock Grid.Row="4" FontWeight="Light" FontSize="11" Foreground="{DynamicResource PasswordBossBlackBackgroundColor}"
                           FontFamily="{DynamicResource ProximaLight}" Margin="0,0,0,0">
                    <Run Text="{Binding AlertMessage.PublishedAgo}" />
                </TextBlock>

            </Grid>
            <Image Grid.Column="5" Grid.Row="1" Height="10" Width="10" Source="{DynamicResource imgCloseAlert}" Focusable="False"
                   HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.InputBindings>
                    <MouseBinding MouseAction="LeftClick"
                                  Command="{Binding ElementName=SecurityNotificationList,Path=DataContext.AlertCloseCommand}"
                                  CommandParameter="{Binding }" />
                </Image.InputBindings>
                <Image.Style>
                    <Style TargetType="Image">
                        <Setter Property="Visibility" Value="Visible"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsHistory}" Value="True">
                                <Setter Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Grid>
    </DataTemplate>

    <Style x:Key="AlertInfoButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualCustomStyle}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <StackPanel Orientation="Horizontal">
                            <Ellipse x:Name="circle" VerticalAlignment="Center"
                                     Height="19" Width="19" Fill="{DynamicResource PasswordBossGreenColor}" />
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="?"
                                       Foreground="{DynamicResource WhiteColor}" FontSize="17" Margin="-13,0,0,0"
                                       FontWeight="SemiBold" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BlackColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource BlackColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SetupWizardPIMobilePhoneNumber" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="17.57" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource SetupWizardMobileNumberInputWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardDWCreditCardNickname" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource SetupWizardDWCreditCardNicknameWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetupWizardDWCreditCardNumber" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource SetupWizardDWCreditCardNumberWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                            <Image x:Name="okTik" Source="{DynamicResource imgTik}" HorizontalAlignment="Right" Width="16" Height="14" Margin="0 0 5 0" Visibility="Hidden"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding CardNumberIsOK}" Value="True">
                            <Setter TargetName="okTik" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ErrorCardNumberVisibility}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossRedColor}" />
                                <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                                <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                                <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource PasswordBossRedColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardDWNameOnCard" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource SetupWizardDWNameOnCardWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                            <Image x:Name="okTik" Source="{DynamicResource imgTik}" HorizontalAlignment="Right" Width="16" Height="14" Margin="0 0 5 0" Visibility="Hidden"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding CardNameIsOK}" Value="True">
                            <Setter TargetName="okTik" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ErrorNameOnCardVisibility}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossRedColor}" />
                                <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                                <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                                <Setter Property="Foreground" TargetName="txtPrompt" Value="{DynamicResource PasswordBossRedColor}"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SetupWizardDWCreditCardCVC" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct1" TargetType="{x:Type TextBox}">
                    <Border Name="Bd" CornerRadius="3"
                            Background="{DynamicResource TextBoxBackground}"
                            BorderThickness="1" Canvas.ZIndex="2"
                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                            SnapsToDevicePixels="true">
                        <Grid Name="TextGrid" Background="{DynamicResource TextBoxBackground}">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock Canvas.ZIndex="1" Text="{DynamicResource SetupWizardDWCreditCardCVCWatermark}" 
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" HorizontalAlignment="Left"
                                       Visibility="Hidden" VerticalAlignment="Center"
                                       FontWeight="{DynamicResource NormalWeight}"
                                       FontFamily="{DynamicResource ProximaRegular}"
                                       Name="txtPrompt" FontSize="{DynamicResource FontSize12}" Padding="15,0,0,0"  />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" TargetName="txtPrompt" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource WhiteColor}" />
                            <Setter Property="Background" TargetName="TextGrid" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColoredEllipseStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="border" CornerRadius="20" Height="10" Width="10"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid>
                                <Ellipse Name="color" StrokeThickness="0" />
                                <ContentPresenter x:Name="contentPresenter"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="border" Property="Height" Value="7" />
                            <Setter TargetName="border" Property="Width" Value="7" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="border" Property="Height" Value="11" />
                            <Setter TargetName="border" Property="Width" Value="11" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="MonthExpComboStyle" TargetType="{x:Type  ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize13}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaLight}" />
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="Padding" Value="0,10,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderThickness="1" CornerRadius="3" BorderBrush="{DynamicResource TextboxBorderbrush}"
                            Background="{DynamicResource TextBoxBackground}">
                        <Grid x:Name="combogrid" Background="{DynamicResource TextBoxBackground}">
                            <ToggleButton
                                Name="ToggleButton" Background="{DynamicResource WhiteColor}"
                                Foreground="{DynamicResource LightGrayTextForegroundColor}"
                                Grid.Column="2" Margin="0" VerticalContentAlignment="Center"
                                Focusable="false" BorderThickness="0"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press" Style="{DynamicResource ToggleButtonStyleForadditemdropdown}"
                                Canvas.ZIndex="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="15,1,0,0"
                                HorizontalAlignment="Left" VerticalAlignment="Center" />
                            <TextBlock x:Name="PART_EditableTextBox"
                                       Style="{x:Null}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Center" FontFamily="{DynamicResource ProximaRegular}"
                                       Focusable="True" FontSize="13"
                                       Visibility="Visible" Padding="0,0,0,0"
                                       Background="{DynamicResource WhiteColor}"
                                       Foreground="{DynamicResource LightGrayTextForegroundColor}" />
                            <Image HorizontalAlignment="Right" Margin="0,0,16,0"
                                   VerticalAlignment="Center" Source="{DynamicResource imgDownArow}"
                                   Height="8" Width="13" />
                            <Popup
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False" PlacementRectangle="0,27,0,0"
                                PopupAnimation="None" Margin="0,0,0,0">
                                <Border Margin="0,3,0,0" BorderThickness="1" CornerRadius="0"
                                        BorderBrush="{DynamicResource TextboxBorderbrush}" Background="{DynamicResource WhiteColor}">
                                    <Grid Margin="0,1,-6,0" Height="160"
                                          Name="DropDown"
                                          SnapsToDevicePixels="True"
                                          MinWidth="{TemplateBinding ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border
                                            x:Name="DropDownBorder"
                                            Background="{DynamicResource TransparentColor}"
                                            BorderThickness="0"
                                            BorderBrush="{DynamicResource GrayColor}" Margin="4.3,2.3,7,2.3" />
                                        <ScrollViewer Margin="0,1,4,2" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        Margin="0,0,0,0" />
                                        </ScrollViewer>
                                    </Grid>

                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                    Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>-->


    <Style x:Key="INSTALLEDBrowserExtnButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="15"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource WhiteColor}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <Image Name="checktext" Source="{DynamicResource imgInstalledMark}" Width="15" Height="11"
                                   HorizontalAlignment="Left" VerticalAlignment="Center"
                                   Margin="9,0,0,0" />
                            <TextBlock Name="NOTINSTALLEDtext" Text="{DynamicResource InstalledUppercase}" FontSize="14" Foreground="{DynamicResource PasswordBossRedColor}"
                                       FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Margin="9,0,0,1" FontFamily="{DynamicResource ProximaRegular}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossRedColor}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NOTINSTALLEDBrowserExtnButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NotInstalledExtensionButtonColor}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="15"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource NotInstalledExtensionButtonColor}"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <TextBlock Name="NOTINSTALLEDtext" Text="{DynamicResource NotInstalledUppercase}" FontSize="14" Foreground="{DynamicResource WhiteColor}"
                                       FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       FontFamily="{DynamicResource ProximaRegular}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LocationComboboxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="14,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{DynamicResource SelectLanguageComboBoxItemSeparator}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize12}" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundcolor}" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Height="25" Width="Auto"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" VerticalAlignment="Center"
                            CornerRadius="0">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource SelectLanguageComboBoxItemForeground}" />
                            <Setter Property="TextElement.FontFamily" TargetName="Bd"
                                    Value="{DynamicResource ProximaRegular}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                    Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                    Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="togglebuttonstyleEmpty" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Tag" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnCheckingFast">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="27" />

                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#00D1A6" To="#00D1A6" Duration="00:00:00" />

                        </Storyboard>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="27" />

                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#00D1A6" To="#00D1A6" Duration="00:00:02" />
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#768386" To="#768386" Duration="00:00:02" />
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel x:Name="dockPanel">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="True" VerticalAlignment="Center" />

                        <Border x:Name="sliderbackground" CornerRadius="10" BorderThickness="2.5" Background="{DynamicResource LightGrayTextForegroundColor}"
                                Width="50" Height="22">
                            <Grid Name="backtgl_btn" Margin="0,0,0,0" Background="Transparent" Height="22">
                                <Border HorizontalAlignment="Left" x:Name="slider" Width="15" Height="15"
                                        Background="{DynamicResource WhiteColor}" BorderBrush="White" BorderThickness="7.5" CornerRadius="20"
                                        Margin="2,0,0,5">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="0" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                        </Border>
                    </DockPanel>


                    <ControlTemplate.Triggers>
                        <Trigger Property="Visibility" Value="Visible">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard >
                                        <StringAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource Self}, Path=Tag}"  Storyboard.TargetProperty="Tag">
                                            <DiscreteStringKeyFrame KeyTime="0:0:0.1" Value="2" />
                                        </StringAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="1" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnCheckingFast}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="2" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarSetup2" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="Background" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ProductTourGrayColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                            Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                            Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    
    <Style x:Key="NoHoverEffectButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HelpControl" TargetType="ContentControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border  Focusable="False" Height="18" Width="18" Background="{DynamicResource SettingsHelpBackground}" CornerRadius="10,10,10,10"  >
                        <StackPanel>
                            <TextBlock x:Name="imgHelp" Margin="5.2,2,0,0" Focusable="False" Height="20" Width="20" FontSize="13" Text="?" Foreground="{DynamicResource WhiteColor}" FontWeight="ExtraBold" FontFamily="{DynamicResource ProximaRegular}"  >
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <Trigger Property="Focusable" Value="True">
                                                <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=imgHelp}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <TextBlock.Triggers>
                                    <EventTrigger RoutedEvent="MouseLeftButtonUp">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard >
                                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                    <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                    <EventTrigger RoutedEvent="LostFocus">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard >
                                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                    <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                </TextBlock.Triggers>
                            </TextBlock>
                            <Popup Grid.Row="4" Grid.Column="3" x:Name="SetupProgressPopup2" IsOpen="False" VerticalOffset="-17" HorizontalOffset="20"
                                    StaysOpen="False" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=imgHelp}"
                                    Placement="Relative" AllowsTransparency="True">
                                <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Left"
                          Margin="0,0,0,0">
                                    <Grid Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="10" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="0" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Path Grid.Column="0" Width="10" Height="15" Grid.Row="1" Grid.RowSpan="2"
                                  StrokeThickness="0" Stretch="Fill"
                                  Stroke="{DynamicResource PasswordBossBlackBackgroundColor}" Fill="{DynamicResource PasswordBossBlackBackgroundColor}"
                                  Data="F1 M 287.328,237.333L 319.344,255.818L 319.344,218.849L 287.328,237.333 Z "
                                  Margin="0,17,0,2" VerticalAlignment="Top" />
                                        <Grid Grid.Column="1" Background="{DynamicResource PasswordBossBlackBackgroundColor}" Grid.Row="1" >
                                            <TextBlock MinHeight="50" Padding="18,10,18,10" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Normal" Foreground="{DynamicResource WhiteColor}" Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" FontFamily="{DynamicResource ProximaRegular}" 
                                                       TextWrapping="Wrap" MaxWidth="220"/>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </Popup>

                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HelpControlTransparent" TargetType="ContentControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Focusable="False" Height="18" Width="18" Background="Transparent" BorderBrush="White" CornerRadius="10,10,10,10" BorderThickness="1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,0,0">
                        <StackPanel>
                            <TextBlock x:Name="imgHelp" Margin="4.5,1.5,0,0" Focusable="False" Height="20" Width="20" FontSize="11" Text="?" Foreground="{DynamicResource WhiteColor}" FontFamily="{DynamicResource ProximaRegular}"  >
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <Trigger Property="Focusable" Value="True">
                                                <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=imgHelp}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <TextBlock.Triggers>
                                    <EventTrigger RoutedEvent="MouseLeftButtonUp">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard >
                                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                    <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                    <EventTrigger RoutedEvent="LostFocus">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard >
                                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                    <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                    </BooleanAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                </TextBlock.Triggers>
                            </TextBlock>
                            <Popup Grid.Row="4" Grid.Column="3" x:Name="SetupProgressPopup2" IsOpen="False" VerticalOffset="-17" HorizontalOffset="20"
                                    StaysOpen="False" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=imgHelp}"
                                    Placement="Relative" AllowsTransparency="True">
                                <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Left"
                          Margin="0,0,0,0">
                                    <Grid Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="10" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="0" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Path Grid.Column="0" Width="10" Height="15" Grid.Row="1" Grid.RowSpan="2"
                                  StrokeThickness="0" Stretch="Fill"
                                  Stroke="{DynamicResource PasswordBossBlackBackgroundColor}" Fill="{DynamicResource PasswordBossBlackBackgroundColor}"
                                  Data="F1 M 287.328,237.333L 319.344,255.818L 319.344,218.849L 287.328,237.333 Z "
                                  Margin="0,17,0,2" VerticalAlignment="Top" />
                                        <Grid Grid.Column="1" Background="{DynamicResource PasswordBossBlackBackgroundColor}" Grid.Row="1" >
                                            <TextBlock MinHeight="50" Padding="20,10,20,10" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Normal" Foreground="{DynamicResource WhiteColor}" Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" FontFamily="{DynamicResource ProximaRegular}" TextWrapping="Wrap" MaxWidth="220"/>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </Popup>

                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LinkHelpControl" TargetType="ContentControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <StackPanel>
                        <TextBlock x:Name="imgHelp" Foreground="#5DBFD0" Focusable="False" FontSize="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}" Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" FontFamily="{DynamicResource ProximaRegular}"  >
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <Trigger Property="Focusable" Value="True">
                                            <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=imgHelp}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                            <TextBlock.Triggers>
                                <EventTrigger RoutedEvent="MouseLeftButtonUp">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard >
                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                </BooleanAnimationUsingKeyFrames>
                                                <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                                </BooleanAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="LostFocus">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard >
                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetName="SetupProgressPopup2" Storyboard.TargetProperty="IsOpen">
                                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                </BooleanAnimationUsingKeyFrames>
                                                <BooleanAnimationUsingKeyFrames  Storyboard.TargetName="imgHelp" Storyboard.TargetProperty="Focusable">
                                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                                </BooleanAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </TextBlock.Triggers>
                        </TextBlock>
                        <Popup Grid.Row="4" Grid.Column="3" x:Name="SetupProgressPopup2" IsOpen="False" Placement="Right" VerticalOffset="-17" HorizontalOffset="10"
                                    StaysOpen="False" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=imgHelp}"
                                     AllowsTransparency="True">
                            <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Left"
                          Margin="0,0,0,0">
                                <Grid Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="0" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Path Grid.Column="0" Width="10" Height="15" Grid.Row="1" Grid.RowSpan="2"
                                  StrokeThickness="0" Stretch="Fill"
                                  Stroke="{DynamicResource PasswordBossBlackBackgroundColor}" Fill="{DynamicResource PasswordBossBlackBackgroundColor}"
                                  Data="F1 M 287.328,237.333L 319.344,255.818L 319.344,218.849L 287.328,237.333 Z "
                                  Margin="0,17,0,2" VerticalAlignment="Top" />
                                    <Grid Grid.Column="1" Background="{DynamicResource PasswordBossBlackBackgroundColor}" Grid.Row="1" >
                                        <TextBlock MinHeight="50" Padding="20,10,20,10" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Normal" Foreground="{DynamicResource WhiteColor}" Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" FontFamily="{DynamicResource ProximaRegular}" TextWrapping="Wrap" MaxWidth="320"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Popup>

                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="StoryboardCloseNewItem" x:Shared="False">
        <DoubleAnimation 
           
            Storyboard.TargetProperty="(Grid.Width)"
            From="326" To="0" Duration="0:0:0.5" AutoReverse="False" />
    </Storyboard>

    <Style x:Key="DigitalWalletSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SliderThumb.Static.Foreground}"/>
        <Setter Property="Template" Value="{DynamicResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LabelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <DataTemplate x:Key="SyncDeviceListTemplate">
        <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource TextBoxBackground}" Background="Transparent">
            <Grid HorizontalAlignment="Stretch" Margin="0,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="240" />
                    <ColumnDefinition Width="395" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0" Grid.Column="0" Margin="0,0,0,0" Text="{Binding devicename}" FontSize="13"
                               Foreground="{DynamicResource AccountSettingTextColor}" FontFamily="{DynamicResource ProximaRegular}"
                               Style="{DynamicResource SecureShareRegularFontStyle}" VerticalAlignment="Center"
                               HorizontalAlignment="Left" />
                <TextBlock Grid.Row="0" Grid.Column="1" Margin="5,0,0,0" Text="{Binding date,StringFormat=d}" FontSize="13"
                               Foreground="{DynamicResource AccountSettingTextColor}" FontFamily="{DynamicResource ProximaRegular}"
                               Style="{DynamicResource SecureShareRegularFontStyle}" VerticalAlignment="Center"
                               HorizontalAlignment="Left" />
                <Image x:Name="Imgdel" Grid.Row="0" Grid.Column="2" Source="{DynamicResource imgTabDelete}" HorizontalAlignment="Left"
                           Visibility="{Binding DeleteEnable, Converter={StaticResource BoolToVisibility}}"
                           RenderOptions.BitmapScalingMode="HighQuality" Height="14" Width="14">
                    <Image.InputBindings>
                        <MouseBinding MouseAction="LeftClick"
                                          Command="{Binding ElementName=accountsetting_grid, Path=DataContext.SyncDeleteCommand}"
                                          CommandParameter="{Binding InstallationId}" />
                    </Image.InputBindings>
                </Image>
            </Grid>
        </Border>
    </DataTemplate>

    <Style x:Key="FeatureNotEnabledLinkButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock FontWeight="SemiBold" Foreground="{DynamicResource GrayColor}" FontSize="12" FontFamily="{DynamicResource ProximaRegular}">
                <ContentPresenter /></TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
    </Style>

    <Style x:Key="LinkButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock FontWeight="{TemplateBinding FontWeight}" FontFamily="{DynamicResource ProximaRegular}">
                <ContentPresenter /></TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
    </Style>

    <Style x:Key="LinkButtonStyleBlue" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock FontWeight="{TemplateBinding FontWeight}" FontFamily="{DynamicResource ProximaRegular}">
                        <ContentPresenter />
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#546c83" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
    </Style>

    <Style x:Key="searchtxtbox"
               TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" CornerRadius="5"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                BorderBrush="{DynamicResource DialogGrayColor}"
                                SnapsToDevicePixels="true" VerticalAlignment="Stretch">
                        <Grid Background="Transparent">
                            <ScrollViewer x:Name="PART_ContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxRoundedBorders" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogGrayColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="8,0,0,8">
                        <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonRoundedBorders" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogGrayColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,8,8,0">
                        <Image Grid.Row="0" Margin="5,0,0,0"
                                   Source="{DynamicResource imgSearch2}" Grid.Column="0" Height="14" Width="14"
                                   VerticalAlignment="Center" HorizontalAlignment="Left" >
                            <Image.InputBindings>
                                <MouseBinding MouseAction="LeftClick" Command="{Binding SecureSearchCommand}" />
                            </Image.InputBindings>
                        </Image>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CalendarStyle1" TargetType="{x:Type Calendar}">
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Red" Offset="0"/>
                    <GradientStop Color="Blue" Offset="0.16"/>
                    <GradientStop Color="Green" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{DynamicResource CalendarItemStyle1}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CalendarItemStyle1" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,3,0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Foreground="{DynamicResource CalendarItemColor}" FontWeight="Bold" FontSize="9.5" FontFamily="Verdana" HorizontalAlignment="Center" Margin="0,6,0,6" Text="{Binding}" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Grid.Resources>
                            <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
                            <Border BorderBrush="#FFFFFFFF" BorderThickness="2" CornerRadius="1">
                                <Grid>
                                    <Grid.Resources>
                                        <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                                <Grid>
                                                    <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="{DynamicResource CalendarItemColor}" HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                        <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                                <Grid>
                                                    <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="{DynamicResource CalendarItemColor}" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                        <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0" To="#FF73A9D8" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="buttonContent"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource CalendarItemColor}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
                                    <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center"/>
                                    <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="28"/>
                                    <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="1" Visibility="Visible">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                    <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="1" Visibility="Hidden">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SelectApplicationComboStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaLight}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Width" Value="235" />
        <Setter Property="Foreground" Value="{DynamicResource PasswordBossBlackBackgroundColor}" />
        <Setter Property="IsDropDownOpen" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource DialogGrayColor}"
                                Background="{DynamicResource WhiteColor}"
                                Focusable="True">
                        <Grid x:Name="combogrid" Background="{DynamicResource TransparentColor}">
                            <ToggleButton
                                    Name="ToggleButton" Background="{DynamicResource WhiteColor}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Margin="0" Focusable="false" BorderThickness="0"
                                    IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press" Style="{DynamicResource ImportFromApplicationsToggleButtonStyle}" Canvas.ZIndex="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch" />
                            <ContentPresenter
                                    Name="ContentSite"
                                    IsHitTestVisible="False"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    Margin="15,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center" />
                            <TextBlock x:Name="PART_EditableTextBox"
                                           Style="{x:Null}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Center" FontFamily="{DynamicResource ProximaRegular}"
                                           Focusable="True" FontSize="20"
                                           Visibility="Visible" 
                                           Padding="15,0,0,0"
                                           Background="{DynamicResource WhiteColor}"
                                           Foreground="{DynamicResource PasswordBossBlackBackgroundColor}" />
                            <Rectangle HorizontalAlignment="Right" Width="1"
                                           Fill="#EFF3F3" Margin="0,0,30,0" />
                            <Image x:Name="Arrow" HorizontalAlignment="Right" Margin="0,0,8,0"
                                       VerticalAlignment="Center" Source="{DynamicResource imgDarkBlueArrowDown}"
                                       Height="8" Width="13" />
                            <Popup
                                    Name="Popup"
                                    Placement="Bottom"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    AllowsTransparency="True"
                                    PlacementRectangle="0,34,0,0"
                                    Focusable="False" 
                                    PopupAnimation="None" Margin="0,0,0,0">
                                <Border Margin="0,0,0,0" BorderThickness="1" CornerRadius="4"
                                            BorderBrush="{DynamicResource DialogGrayColor}"
                                            Background="{DynamicResource WhiteColor}">
                                    <Grid Margin="0,1,-3,0"
                                              Name="DropDown"
                                              SnapsToDevicePixels="True"
                                              Width="{Binding ElementName=combogrid, Path=ActualWidth}"
                                              MinHeight="{TemplateBinding ActualHeight }"
                                              MaxHeight="150">
                                        <Border
                                                x:Name="DropDownBorder"
                                                Background="{DynamicResource TransparentColor}"
                                                BorderThickness="0"
                                                BorderBrush="{DynamicResource GrayColor}" Margin="4.3,2.3,7,2.3" />
                                        <ScrollViewer Margin="0,1,4,2" SnapsToDevicePixels="True" Template="{DynamicResource CustomScrollViewerTemplate}">
                                            <StackPanel IsItemsHost="True"
                                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                                            Margin="0,0,0,0" />
                                        </ScrollViewer>
                                    </Grid>

                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Arrow" Property="Image.Source" Value="{DynamicResource imgDarkBlueArrowUp}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!--Import from applications Combobox item style-->
    <Style x:Key="ImportFromApplicationComboboxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="3,3,0,3" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="{DynamicResource SelectLanguageComboBoxItemSeparator}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundcolor}" />
        <Setter Property="HorizontalContentAlignment"
                    Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                    Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Height="30"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"
                                VerticalAlignment="Center"
                                CornerRadius="4">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource SelectLanguageComboBoxItemForeground}" />
                            <Setter Property="TextElement.FontFamily" TargetName="Bd"
                                        Value="{DynamicResource ProximaRegular}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd"
                                        Value="{DynamicResource PasswordBossGreenColor}" />
                            <Setter Property="TextElement.Foreground" TargetName="Bd"
                                        Value="{DynamicResource WhiteColor}" />
                            <Setter Property="BorderBrush" TargetName="Bd"
                                        Value="{DynamicResource TransparentColor}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Import from applications Combobox ToggleButton Style-->
    <Style x:Key="ImportFromApplicationsToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border"
                                        Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UpdateButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="./resources/fonts/#ProximaNova-Regular" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="backupButtonstyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SettingsGreenColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Template">            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"  BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource CommonCornerRadius}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossGreenColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource LightGrayTextForegroundColor}" />
                            <!--<Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="./resources/fonts/#ProximaNova-Regular" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UpdateButtonStyleChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SetupWizardOneClickButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HandCursorStyle" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Added for expander -->

    <Style x:Key="ExpanderHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Image x:Name="arrowImage"  RenderTransformOrigin=".5,.5" Width="20" Height="17" Source="{DynamicResource collapse_menu_grey}" Stretch="Fill">
                                    <Image.LayoutTransform>
                                        <RotateTransform Angle="180"/>
                                    </Image.LayoutTransform>
                                </Image>
                            </Grid>                           
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="LayoutTransform" TargetName="arrowImage">
                                <Setter.Value>
                                    <RotateTransform Angle="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border Padding="{TemplateBinding Padding}">                           
                                                    <ContentPresenter HorizontalAlignment="Center" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>

    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
                                <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainMenuExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="auto"/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderRightHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentPresenter Grid.Row="1" x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                              </Grid>
                        </DockPanel>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                                        </Trigger>

                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
    


    <Style x:Key="ButtonStyleDashBoardMenu" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0,0,0,0" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource TransparentColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TransparentColor}"  />
        <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="BorderThickness" Value="3,0,0,0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                           
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#2D4A5B" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource DashboardButtonGreenColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource AlertButtonBackgroundcolor}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource DashboardButtonGreenColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource AlertButtonBackgroundcolor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource DashboardButtonGreenColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UnlockProfileWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="WindowStyle" Value="None" />
    </Style>


    <!-- signin radiobutton Style-->
    <Style x:Key="SignInRadioButtonsStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource TransparentColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TransparentColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="{DynamicResource TransparentColor}"
                              SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0" Background="{DynamicResource TransparentColor}"
                                    CornerRadius="100"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,-3,2,1"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Background="{DynamicResource TransparentColor}">
                                <Image x:Name="Offmark" Source="{DynamicResource imgRadioButtonUntick}" Height="10"
                                           Width="10" Opacity="1" />
                                <Image x:Name="optionMark" Source="{DynamicResource imgRadioButtonTick}"
                                           Height="14" Width="14" Opacity="0" />
                            </Grid>
                        </Border>

                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="2,-3,0,0" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource RadioButtonBackground}" />
                            <Setter Property="Padding" Value="2,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="Offmark" Value="0" />
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource WhiteColor}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSubmitted}" Value="True" />
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="Red" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogGrayColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Name="Bd" BorderThickness="2" 
                                             BorderBrush="{TemplateBinding BorderBrush}" 
                                             Background="{TemplateBinding Background}" 
                                             SnapsToDevicePixels="true" CornerRadius="2">
                        <ScrollViewer Name="PART_ContentHost" Background="{TemplateBinding Background}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MessageLinkTemplate" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#CBCFD1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PasswordBossRedColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StepTextBlockTemplate" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource DialogBorderColor}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#CFD2D4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MessageTextBlockTemplate" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundcolor}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#CBCFD1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordBoxTemplate" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource WhiteColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogGrayColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border Name="Bd" BorderThickness="2" 
                                             BorderBrush="{TemplateBinding BorderBrush}" 
                                             Background="{TemplateBinding Background}" 
                                             SnapsToDevicePixels="true" CornerRadius="2">
                        <ScrollViewer Name="PART_ContentHost" Background="{TemplateBinding Background}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ImportFromSecureExportButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource PasswordBossRedColor}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="11" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="0,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource FillEllipsesDefaultcolor}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource WhiteColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossRedHoverColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Select Language Combobox ToggleButton Style-->
    <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                               StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SignInButtonBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border"
                                        Value="{DynamicResource SelectLanguageToggleButtonBackground}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                        Value="{DynamicResource SelectLanguageToggleButtonBorderBrush}" />
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                                        Value="{DynamicResource SelectLanguageToggleButtonForeground}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom template to enable scrolling of items in list box (removed scroll viewer from listbox template) -->
    <Style x:Key="CustomListBoxTemplate" TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Name="Border" 
                            BorderThickness="1"
                            CornerRadius="2">
                        <StackPanel Margin="2" IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}" x:Key="CustomDeleteMenuItem">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid Background="{DynamicResource WhiteColor}" Height="30" Width="30">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="20"/>
                            <RowDefinition Height="10"/>
                        </Grid.RowDefinitions>
                        <Image Grid.Row="0" Width="15" Height="15" Source="{DynamicResource imgTrash}" Margin="0,0,0,0" />
                        <TextBlock Grid.Row="1" Text="{DynamicResource Delete}" Margin="3,3,0,0" FontFamily="Arial" FontSize="14" 
                                       FontWeight="Bold" VerticalAlignment="Center" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding}" Margin="5,0,0,0" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListBox DataTemplate for PasswordVault Recommended item-->
    <DataTemplate  x:Key="PasswordVaultRecommendedListItemTemplate">
        <Border x:Name="mainBorder" BorderBrush="White" BorderThickness="2" Margin="0,0,0,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}" Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="48"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1" Grid.ColumnSpan="2"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48">
                    <TextBlock Text="{DynamicResource AddPasswordHoverText}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>

                <Image x:Name="dataImg" Margin="1,1,0,1" Grid.Column="0" Height="45" Width="90"
                       Source="{Binding Image}" HorizontalAlignment="Stretch">
                </Image>


                <TextBlock x:Name="dataTb" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,0,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="2"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <!-- ListBox DataTemplate for Digital Wallet and Personal Info Recommended item-->
    <DataTemplate  x:Key="DigitalWalletRecommendedItemTemplate">
        <Border x:Name="mainBorder" BorderBrush="White" BorderThickness="2" Margin="0,0,0,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}" Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="48"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1" Grid.ColumnSpan="2"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48">
                    <TextBlock FontSize="14" FontWeight="Bold" Text="{Binding RecommendedHoverText, UpdateSourceTrigger=PropertyChanged}" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center">
                    </TextBlock>
                </Border>

                <Image x:Name="dataImg" Margin="1,1,0,1" Grid.Column="0" Height="45" Width="90"
                       Source="{Binding Image}" HorizontalAlignment="Stretch">
                </Image>

                <TextBlock x:Name="dataTb" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,0,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="2"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
            </Grid>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDown">
                    <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Border>

        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <!-- ListBox DataTemplate for PasswordVault list-view data-->
    <DataTemplate  x:Key="listdatatemplate">
        <Border x:Name="mainBorder" BorderBrush="White" BorderThickness="2" Margin="0,0,0,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}"  Margin="0,0,0,0" UseLayoutRounding="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="48"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition  Width="50"/>
                    <ColumnDefinition  Width="50"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48">
                    <TextBlock Text="{DynamicResource DoubleClickToOpenSite}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>
                <Border x:Name="SettingsHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="4"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48" />
                <Border x:Name="SharingHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="3"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48" />

                <Image x:Name="dataImg" Margin="1,1,0,1" Grid.Column="0" Height="45" Width="90"
                       Source="{Binding Image}" HorizontalAlignment="Stretch" RenderOptions.BitmapScalingMode="HighQuality">

                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>
                </Image>

                <Grid x:Name="LeftPartOfItemGrid" Grid.Column="1" Background="Transparent" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Column="0" Margin="50,0,0,0" HorizontalAlignment="Left" MaxHeight="20" MinHeight="15">
                        <TextBlock x:Name="dataTb" HorizontalAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" TextWrapping="Wrap" TextAlignment="Left"
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                    </Viewbox>
                    <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>

                </Grid>

                <Border x:Name="FavoritesImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Grid.Column="2" Background="Transparent">
                    <Image x:Name="listBoxFavorites" Height="18" Width="18" Source="{Binding Path=FavoriteImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                           RenderOptions.BitmapScalingMode="HighQuality" ToolTip="{DynamicResource Favorite}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding FavoritesCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="ShareImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="3" Background="Transparent"  >
                    <Image x:Name="listBoxShare" Height="18" Width="18" Source="{Binding Path=ShareImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Sharing}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding ShareItemCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>
                <Border x:Name="SettingsImageBorder" BorderThickness="1,0,0,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="4" Background="Transparent">
                    <Image x:Name="listBoxSettings" Height="18" Width="18" Source="{DynamicResource imgGear}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Settings}"/>

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding GearButtonCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                </Border>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=dataImg}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=LeftPartOfItemGrid}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=SettingsImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SettingsHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="SettingsImageBorder" Value="0.5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=ShareImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SharingHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="ShareImageBorder" Value="0.5"/>
                <Setter Property="Source" TargetName="listBoxShare" Value="{DynamicResource imgShare2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=listBoxFavorites}" Value="True">
                <Setter Property="Source" TargetName="listBoxFavorites" Value="{DynamicResource imgFavoritesHover}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ListBox DataTemplate for DigitalWallet and PersonalInfo list-view data-->
    <DataTemplate  x:Key="NoSiteHoverDataTemplate">
        <Border x:Name="mainBorder" BorderBrush="White" BorderThickness="2" Margin="0,0,0,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}"  Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="48"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition  Width="50"/>
                    <ColumnDefinition  Width="50"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48">
                    <TextBlock Text="{DynamicResource DoubleClickToOpenItem}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>
                <Border x:Name="SettingsHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="4"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48" />
                <Border x:Name="SharingHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="3"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="48" />

                <Image x:Name="dataImg" Margin="1,1,0,1" Grid.Column="0" Height="45" Width="90"
                       Source="{Binding Image}" HorizontalAlignment="Stretch" RenderOptions.BitmapScalingMode="HighQuality">

                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>
                </Image>

                <Grid x:Name="LeftPartOfItemGrid" Grid.Column="1" Background="Transparent" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Column="0" Margin="50,0,0,0" HorizontalAlignment="Left" MaxHeight="20" MinHeight="15">
                        <TextBlock x:Name="dataTb" HorizontalAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" TextWrapping="Wrap" TextAlignment="Left"
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                    </Viewbox>
                    <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>

                </Grid>

                <Border x:Name="FavoritesImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Grid.Column="2" Background="Transparent">
                    <Image x:Name="listBoxFavorites" Height="18" Width="18" Source="{Binding Path=FavoriteImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                           RenderOptions.BitmapScalingMode="HighQuality" ToolTip="{DynamicResource Favorite}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding FavoritesCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="ShareImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="3" Background="Transparent"  >
                    <Image x:Name="listBoxShare" Height="18" Width="18" Source="{Binding Path=ShareImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="{DynamicResource Sharing}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding ShareItemCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>
                <Border x:Name="SettingsImageBorder" BorderThickness="1,0,0,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="4" Background="Transparent">
                    <Image x:Name="listBoxSettings" Height="18" Width="18" Source="{DynamicResource imgGear}" RenderOptions.BitmapScalingMode="HighQuality" ToolTip="{DynamicResource Settings}"/>

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding GearButtonCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=dataImg}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=LeftPartOfItemGrid}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=SettingsImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SettingsHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="SettingsImageBorder" Value="0.5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=ShareImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SharingHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="ShareImageBorder" Value="0.5"/>
                <Setter Property="Source" TargetName="listBoxShare" Value="{DynamicResource imgShare2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=listBoxFavorites}" Value="True">
                <Setter Property="Source" TargetName="listBoxFavorites" Value="{DynamicResource imgFavoritesHover}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--Select Language Combobox Style-->
    <Style x:Key="SelectLanguageComboStyle" TargetType="{x:Type  ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize20}" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaLight}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Width" Value="303" />
        <Setter Property="MaxDropDownHeight" Value="114" />
        <Setter Property="IsDropDownOpen" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border BorderThickness="2" CornerRadius="10" BorderBrush="{DynamicResource TransparentColor}"
                                Background="{DynamicResource WhiteColor}"
                                Focusable="True">
                        <Grid x:Name="combogrid" Background="{DynamicResource TransparentColor}">
                            <ToggleButton
                                    Name="ToggleButton" Background="{DynamicResource WhiteColor}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Grid.Column="2" Margin="0" VerticalContentAlignment="Center"
                                    Focusable="false" BorderThickness="0"
                                    IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press" Style="{DynamicResource ToggleButtonStyle1}" Canvas.ZIndex="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch" />
                            <ContentPresenter
                                    Name="ContentSite"
                                    IsHitTestVisible="False"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    Margin="15,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center" />
                            <TextBlock x:Name="PART_EditableTextBox"
                                           Style="{x:Null}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Center" FontFamily="{DynamicResource ProximaRegular}"
                                           Focusable="True" FontSize="20"
                                           Visibility="Visible" 
                                           Padding="15,0,0,0"
                                           Background="{DynamicResource WhiteColor}"
                                           Foreground="{DynamicResource LightGrayTextForegroundColor}" />

                            <Rectangle HorizontalAlignment="Right" Width="1"
                                           Fill="{DynamicResource SelectLanguageComboBoxForeground}" Margin="0,0,45,0" />
                            <Image x:Name="Arrow" HorizontalAlignment="Right" Margin="0,0,16,0"
                                       VerticalAlignment="Center" Source="{DynamicResource imgGreenArrowDown}"
                                       Height="8" Width="13" />
                            <Popup
                                    Name="Popup"
                                    Placement="Bottom"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    AllowsTransparency="True"
                                    Focusable="False" PlacementRectangle="0,45,0,0"
                                    PopupAnimation="None" Margin="0,0,0,0">
                                <Border Margin="0,3,0,0" BorderThickness="2 1 2 1" CornerRadius="4"
                                            BorderBrush="{DynamicResource TextboxBorderbrush}"
                                            Background="{DynamicResource WhiteColor}">
                                    <Grid Margin="0,1,0,0"
                                              Name="DropDown"
                                              SnapsToDevicePixels="True"
                                              Width="{Binding ElementName=combogrid, Path=ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border
                                                x:Name="DropDownBorder"
                                                Background="{DynamicResource TransparentColor}"
                                                BorderThickness="0"
                                                BorderBrush="{DynamicResource GrayColor}" Margin="4.3,2.3,7,2.3" />
                                        <ScrollViewer Margin="0,1,4,2" SnapsToDevicePixels="True" Template="{DynamicResource CustomScrollViewerTemplate}" VerticalScrollBarVisibility="Auto">
                                            <StackPanel IsItemsHost="True"
                                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                                            Margin="0,0,0,0" />
                                        </ScrollViewer>
                                    </Grid>

                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Arrow" Property="Image.Source" Value="{DynamicResource imgGreenArrowUp}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />

                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ToggleButton" Property="ToggleButton.Background"
                                        Value="{DynamicResource TransparentColor}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>





    <!-- SECURE ITEM LIST TEMPLATE -->

    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Style.Resources>
            <LinearGradientBrush x:Key="fileListHotTrackBrush" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="White" Offset="0" />
                <GradientStop Color="#00D1A7" Offset="0.55" />
                <GradientStop Color="#00A785" Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="fileListSelectionBrush"  EndPoint="0,0" StartPoint="0,1" >
                <GradientStop Color="Transparent" Offset="0.2" />
                <GradientStop Color="#00A785" Offset="1" />
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="whiteToTransparent"  EndPoint="0,0" StartPoint="0,1" >
                <GradientStop Color="Transparent" Offset="0.2" />
                <GradientStop Color="White" Offset="1" />
            </LinearGradientBrush>
        </Style.Resources>
        <!--<Setter Property="Margin" Value="1,2,1,1"/>-->
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="15,15,0,0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <!--<Setter Property="Background" Value="{TemplateBinding ListViewItem.Background}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3,3,3,3" Margin="0,0,0,0">
                        <ContentPresenter Margin="0,0,2,0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource whiteToTransparent}" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource fileListSelectionBrush}" />
                        </Trigger>-->
                        <Trigger Property="uc:SelectionHelper.IsDragging" Value="True">
                            <Setter Property="IsSelected" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <uc:VirutalWrapPanelView  x:Key="SecureItemIconView" ItemHeight="145" ItemWidth="163" x:Shared="False">

    </uc:VirutalWrapPanelView>

    <DataTemplate x:Key="RecommendedSecureItemIconViewTemplate">
        <StackPanel>
            <Border x:Name="border" CornerRadius="3,3,3,3" BorderBrush="Transparent"
                            BorderThickness="2" Margin="0,0,0,0"
                            Background="{DynamicResource WhiteColor}" SnapsToDevicePixels="true">
                <Grid x:Name="grid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Image x:Name="itemGridImage" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Width="130" Height="65"
										   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										   Source="{Binding Image}" Margin="3,3,3,5" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Image>
                    <Border Grid.Column="0" Grid.Row="0"  Grid.RowSpan="2" Grid.ColumnSpan="3" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0,0,0,0"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Image Source="{DynamicResource imgAddHover}" Height="38" Width="38"
												   Margin="0,5,0,0" />
                            <TextBlock Text="{DynamicResource AddPasswordHoverText}" Foreground="{DynamicResource WhiteColor}"
													   FontWeight="SemiBold" FontFamily="{DynamicResource ProximaSemiBold}"
													   FontSize="13.5" Margin="0,10,0,0" />
                        </StackPanel>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}"/>
                                <Setter Property="Border.Visibility" Value="Collapsed"></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=grid, Path=IsMouseOver}" Value="true">
                                        <Setter Property="Border.Visibility" Value="Visible"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>

                </Grid>
            </Border>
            <TextBlock HorizontalAlignment="Stretch" Margin="8, 5, 8, 5"  Padding="0,0,0,0" TextAlignment="Center" 
                       TextWrapping="Wrap" FontFamily="{DynamicResource ProximaRegular}" MaxHeight="40"
                       Background="Transparent" Foreground="{DynamicResource LightGrayTextForegroundColor}" Text="{Binding Name}" ToolTip="{Binding Name}" />
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="SecureItemIconViewTemplate" >

        <StackPanel Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}">
            <Border x:Name="border" CornerRadius="3 3 3 3" Background="{DynamicResource WhiteColor}" BorderThickness="2" SnapsToDevicePixels="true" BorderBrush="Transparent">
                <Grid x:Name="grid">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="20" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="25" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="favoritesGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center"
										   HorizontalAlignment="Left" Margin="2,2,0,0" Height="15" Width="15">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{DynamicResource imgStarList}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding Favorite, Mode=TwoWay}" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding FavoritesCommand}" CommandParameter="{Binding ItemId}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Image>

                        <Image x:Name="settingsGridImage" Grid.Column="2" Grid.Row="0" VerticalAlignment="Center"
										   HorizontalAlignment="Right" Height="15" Width="15" Margin="0,2,2,0"
										   Visibility="{Binding ItemSettingsIsVisible, Converter={StaticResource BoolToVisibility}, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding GearButtonCommand}" CommandParameter="{Binding ItemId}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{DynamicResource imgSettingIcon}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgGearHover}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>

                        <Image x:Name="itemGridImage" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3"
										   Width="130" Height="65"
										   Source="{Binding Image}" Margin="3,3,3,5">
                            <Image.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenInBrowserCommand}" CommandParameter="{Binding ItemId}"/>
                            </Image.InputBindings>
                        </Image>
                        <Button x:Name="HoverButton" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Foreground="Transparent" BorderThickness="0,0,0,0" 
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed">
                            <TextBlock Text="{DynamicResource DoubleClickToOpenSite}" Foreground="{DynamicResource WhiteColor}"
													FontSize="13.5" FontWeight="SemiBold"
													FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,0,0,0"
													TextWrapping="Wrap" Width="100" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" TextAlignment="Center">

                            </TextBlock>
                            <Button.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenInBrowserCommand}" CommandParameter="{Binding ItemId}"/>
                            </Button.InputBindings>
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Border Background="{TemplateBinding Background}" CornerRadius="3,3,3,3">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </Grid>

            </Border>
            <TextBlock HorizontalAlignment="Stretch" Margin="8, 5, 8, 5" TextAlignment="Center" MaxHeight="40"
                       FontFamily="{DynamicResource ProximaRegular}" Background="Transparent" TextWrapping="Wrap" TextTrimming="CharacterEllipsis"
                       Foreground="{DynamicResource LightGrayTextForegroundColor}" Text="{Binding Name}" ToolTip="{Binding Name}" />
            <StackPanel.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{DynamicResource Delete}"
                              Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.DataContext.DeleteSelectedItemsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}">
                        <MenuItem.Icon>
                            <Image Source="{DynamicResource imgTrash}" Height="16" Width="15"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </StackPanel.ContextMenu>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=grid, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding ElementName=settingsGridImage, Path=IsMouseOver}" Value="False" />
                    <Condition Binding="{Binding ElementName=favoritesGridImage, Path=IsMouseOver}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="HoverButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="RecommendedDigitalWalletPersonalInfoIconViewTemplate">
        <StackPanel>
            <Border x:Name="border" CornerRadius="3,3,3,3" BorderBrush="Transparent"
                            BorderThickness="2" Margin="0,0,0,0"
                            Background="{DynamicResource WhiteColor}" SnapsToDevicePixels="true">
                <Grid x:Name="grid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Image x:Name="itemGridImage" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Width="130" Height="65"
										   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										   Source="{Binding Image}" Margin="3,3,3,5" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Image>
                    <Border Grid.Column="0" Grid.Row="0"  Grid.RowSpan="2" Grid.ColumnSpan="3" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0,0,0,0"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Image Source="{DynamicResource imgAddHover}" Height="38" Width="38"
												   Margin="0,5,0,0" />
                            <TextBlock Text="{DynamicResource Add}" Foreground="{DynamicResource WhiteColor}"
													   FontWeight="SemiBold" FontFamily="{DynamicResource ProximaSemiBold}"
													   FontSize="13.5" Margin="0,10,0,0" TextAlignment="Center" />
                        </StackPanel>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}"/>
                                <Setter Property="Border.Visibility" Value="Collapsed"></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=grid, Path=IsMouseOver}" Value="true">
                                        <Setter Property="Border.Visibility" Value="Visible"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>

                </Grid>
            </Border>
            <TextBlock HorizontalAlignment="Stretch" Margin="8, 5, 8, 5"  Padding="0,0,0,0" TextAlignment="Center" 
                       TextWrapping="Wrap" FontFamily="{DynamicResource ProximaRegular}" MaxHeight="40"
                       Background="Transparent" Foreground="{DynamicResource LightGrayTextForegroundColor}" Text="{Binding Name}" ToolTip="{Binding Name}" />
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="DigitalWalletPersonalInfoIconViewTemplate" >

        <StackPanel Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}">
            <Border x:Name="border" CornerRadius="3 3 3 3" Background="{DynamicResource WhiteColor}" BorderThickness="2" SnapsToDevicePixels="true" BorderBrush="Transparent">
                <Grid x:Name="grid">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="20" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="25" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="favoritesGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center"
										   HorizontalAlignment="Left" Margin="2,2,0,0" Height="15" Width="15">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{DynamicResource imgStarList}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding Favorite, Mode=TwoWay}" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding FavoritesCommand}" CommandParameter="{Binding ItemId}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Image>

                        <Image x:Name="settingsGridImage" Grid.Column="2" Grid.Row="0" VerticalAlignment="Center"
										   HorizontalAlignment="Right" Height="15" Width="15" Margin="0,2,2,0"
										   Visibility="{Binding ItemSettingsIsVisible, Converter={StaticResource BoolToVisibility}, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseLeftButtonUp">
                                    <i:InvokeCommandAction Command="{Binding GearButtonCommand}" CommandParameter="{Binding ItemId}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{DynamicResource imgSettingIcon}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Source" Value="{DynamicResource imgGearHover}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>

                        <Image x:Name="itemGridImage" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3"
										   Width="130" Height="65"
										   Source="{Binding Image}" Margin="3,3,3,5">
                            <Image.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenInBrowserCommand}" CommandParameter="{Binding ItemId}"/>
                            </Image.InputBindings>
                        </Image>
                        <Button x:Name="HoverButton" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Foreground="Transparent" BorderThickness="0,0,0,0" 
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed">
                            <TextBlock Text="{DynamicResource DoubleClickToOpenItem}" Foreground="{DynamicResource WhiteColor}"
													FontSize="13.5" FontWeight="SemiBold"
													FontFamily="{DynamicResource ProximaSemiBold}" Margin="0,0,0,0"
													TextWrapping="Wrap" Width="100" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" TextAlignment="Center">

                            </TextBlock>
                            <Button.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding OpenInBrowserCommand}" CommandParameter="{Binding ItemId}"/>
                            </Button.InputBindings>
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="Background" Value="{DynamicResource PasswordBossGreenColor}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Border Background="{TemplateBinding Background}" CornerRadius="3,3,3,3">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </Grid>

            </Border>
            <TextBlock HorizontalAlignment="Stretch" Margin="8, 5, 8, 5" TextAlignment="Center" MaxHeight="40"
                       FontFamily="{DynamicResource ProximaRegular}" Background="Transparent" TextWrapping="Wrap" TextTrimming="CharacterEllipsis"
                       Foreground="{DynamicResource LightGrayTextForegroundColor}" Text="{Binding Name}" ToolTip="{Binding Name}" />
            <StackPanel.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{DynamicResource Delete}"
                              Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.DataContext.DeleteSelectedItemsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}">
                        <MenuItem.Icon>
                            <Image Source="{DynamicResource imgTrash}" Height="16" Width="15"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </StackPanel.ContextMenu>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=grid, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding ElementName=settingsGridImage, Path=IsMouseOver}" Value="False" />
                    <Condition Binding="{Binding ElementName=favoritesGridImage, Path=IsMouseOver}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="HoverButton" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="GridViewHideHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Margin" Value="15,15,0,0" />
    </Style>

    <GridView x:Key="SecureItemGridView" x:Shared="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
        <GridViewColumn Header="Category" HeaderContainerStyle="{DynamicResource GridViewHideHeaderStyle}" Width="{Binding ElementName=listView, Path=ActualWidth}" 
                        DisplayMemberBinding="{Binding Category}" />
    </GridView>

    <DataTemplate  x:Key="SecureItemGridViewTemplate">
        <Border x:Name="mainBorder" BorderBrush="Transparent" BorderThickness="2" Margin="-3,-5,15,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}" Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}"  Margin="0,0,0,0" UseLayoutRounding="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="51"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition  Width="50"/>
                    <ColumnDefinition  Width="50"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51">
                    <TextBlock Text="{DynamicResource DoubleClickToOpenSite}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>
                <Border x:Name="SettingsHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="4"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51" />
                <Border x:Name="SharingHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="3"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51" />

                <Image x:Name="dataImg" Grid.Column="0" Height="45" Width="90" Margin="-3,0,0,0"
                       Source="{Binding Image}" RenderOptions.BitmapScalingMode="HighQuality">

                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>
                </Image>

                <Grid x:Name="LeftPartOfItemGrid" Grid.Column="1" Background="Transparent" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Column="0" Margin="50,0,0,0" HorizontalAlignment="Left" MaxHeight="20" MinHeight="15">
                        <TextBlock x:Name="dataTb" HorizontalAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" TextWrapping="Wrap" TextAlignment="Left"
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                    </Viewbox>
                    <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>

                </Grid>

                <Border x:Name="FavoritesImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Grid.Column="2" Background="Transparent">
                    <Image x:Name="favoritesGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" Height="18" Width="18">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{DynamicResource imgStarList}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Favorite, Mode=TwoWay}" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding FavoritesCommand}" CommandParameter="{Binding ItemId}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="ShareImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="3" Background="Transparent"  >
                    <Image x:Name="listBoxShare" Height="18" Width="18" Source="{Binding Path=ShareImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Sharing}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding ShareItemCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>
                <Border x:Name="SettingsImageBorder" BorderThickness="1,0,0,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="4" Background="Transparent">
                    <Image x:Name="listBoxSettings" Height="18" Width="18" Source="{DynamicResource imgGear}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Settings}"/>

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding GearButtonCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                </Border>
            </Grid>
            <Border.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{DynamicResource Delete}"
                              Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.DataContext.DeleteSelectedItemsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}">
                        <MenuItem.Icon>
                            <Image Source="{DynamicResource imgTrash}" Height="16" Width="15"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Border.ContextMenu>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=dataImg}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=LeftPartOfItemGrid}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=SettingsImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SettingsHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="SettingsImageBorder" Value="0.5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=ShareImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SharingHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="ShareImageBorder" Value="0.5"/>
                <Setter Property="Source" TargetName="listBoxShare" Value="{DynamicResource imgShare2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate  x:Key="RecommendedSecureItemGridViewTemplate">
        <Border x:Name="mainBorder" BorderBrush="Transparent" BorderThickness="2" Margin="-3,-5,15,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}" Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="51"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1" Grid.ColumnSpan="2"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51">
                    <TextBlock Text="{DynamicResource AddPasswordHoverText}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>

                <Image x:Name="dataImg" Grid.Column="0" Height="45" Width="90" Source="{Binding Image}" Margin="-3,0,0,0" />



                <TextBlock x:Name="dataTb" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,0,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="2"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate  x:Key="DigitalWalletPersonalInfoSecureItemListViewTemplate">
        <Border x:Name="mainBorder" BorderBrush="Transparent" BorderThickness="2" Margin="-3,-5,15,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}" Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}"  Margin="0,0,0,0" UseLayoutRounding="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="51"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition  Width="50"/>
                    <ColumnDefinition  Width="50"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51">
                    <TextBlock Text="{DynamicResource DoubleClickToOpenItem}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>
                <Border x:Name="SettingsHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="4"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51" />
                <Border x:Name="SharingHoverBorder" Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="3"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51" />

                <Image x:Name="dataImg" Grid.Column="0" Height="45" Width="90" Margin="-3,0,0,0"
                       Source="{Binding Image}" RenderOptions.BitmapScalingMode="HighQuality">

                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>
                </Image>

                <Grid x:Name="LeftPartOfItemGrid" Grid.Column="1" Background="Transparent" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>

                    <Viewbox Grid.Column="0" Margin="50,0,0,0" HorizontalAlignment="Left" MaxHeight="20" MinHeight="15">
                        <TextBlock x:Name="dataTb" HorizontalAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" TextWrapping="Wrap" TextAlignment="Left"
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                    </Viewbox>
                    <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                    <i:Interaction.Triggers>
                        <helpers:DoubleClickEventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}" />
                        </helpers:DoubleClickEventTrigger>
                    </i:Interaction.Triggers>

                </Grid>

                <Border x:Name="FavoritesImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Grid.Column="2" Background="Transparent">
                    <Image x:Name="favoritesGridImage" Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" Height="18" Width="18">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="{DynamicResource imgStarList}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Favorite, Mode=TwoWay}" Value="True">
                                        <Setter Property="Source" Value="{DynamicResource imgStarHoverList}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding FavoritesCommand}" CommandParameter="{Binding ItemId}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>

                <Border x:Name="ShareImageBorder" BorderThickness="1,0,1,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="3" Background="Transparent"  >
                    <Image x:Name="listBoxShare" Height="18" Width="18" Source="{Binding Path=ShareImage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Sharing}"/>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding ShareItemCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Border>
                <Border x:Name="SettingsImageBorder" BorderThickness="1,0,0,0" BorderBrush="{DynamicResource SecureBrowserLightGrayBackgroundColor}"  Margin="0,2,0,2" Grid.Column="4" Background="Transparent">
                    <Image x:Name="listBoxSettings" Height="18" Width="18" Source="{DynamicResource imgGear}" RenderOptions.BitmapScalingMode="HighQuality"  ToolTip="{DynamicResource Settings}"/>

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <i:InvokeCommandAction Command="{Binding GearButtonCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                </Border>
            </Grid>
            <Border.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{DynamicResource Delete}"
                              Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.DataContext.DeleteSelectedItemsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}">
                        <MenuItem.Icon>
                            <Image Source="{DynamicResource imgTrash}" Height="16" Width="15"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Border.ContextMenu>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=dataImg}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=LeftPartOfItemGrid}" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=SettingsImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SettingsHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="SettingsImageBorder" Value="0.5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver,ElementName=ShareImageBorder}" Value="True">
                <Setter Property="Visibility" TargetName="SharingHoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="ShareImageBorder" Value="0.5"/>
                <Setter Property="Source" TargetName="listBoxShare" Value="{DynamicResource imgShare2}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate  x:Key="RecommendedDigitalWalletPersonalInfoSecureItemListViewTemplate">
        <Border x:Name="mainBorder" BorderBrush="Transparent" BorderThickness="2" Margin="-3,-5,15,0"
              CornerRadius="2" Background="{DynamicResource WhiteColor}">
            <Grid x:Name="gridlist" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Background="{DynamicResource WhiteColor}" Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="51"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="hoverBorder"  Background="{DynamicResource PasswordBossGreenColor}" BorderThickness="0" Grid.Column="1" Grid.ColumnSpan="2"
                        Visibility="Collapsed" HorizontalAlignment="Stretch" Height="51">
                    <TextBlock Text="{Binding RecommendedHoverText, UpdateSourceTrigger=PropertyChanged}" FontSize="14" FontWeight="Bold" FontFamily="{DynamicResource ProximaRegular}"
                               Foreground="{DynamicResource WhiteColor}" TextAlignment="Center" HorizontalAlignment="Center" 
                               VerticalAlignment="Center" />
                </Border>

                <Image x:Name="dataImg" Grid.Column="0" Height="45" Width="90" Source="{Binding Image}" Margin="-3,0,0,0" />



                <TextBlock x:Name="dataTb" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="1"  Margin="50,0,0,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="15" FontWeight="Bold"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Name}" />
                <TextBlock x:Name="UsernameTextBlock" HorizontalAlignment="Left" TextAlignment="Left"
                           Foreground="{DynamicResource LightGrayTextForegroundColor}" Grid.Column="2"  Margin="50,0,10,0" 
                           Padding="0,0,0,0" VerticalAlignment="Center" FontSize="13" TextWrapping="Wrap"
                           FontFamily="{DynamicResource ProximaRegular}" Text="{Binding Username}" />
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <i:InvokeCommandAction Command="{Binding OpenInBrowserCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible"/>
                <Setter Property="Opacity" TargetName="dataTb" Value="0"/>
                <Setter Property="Opacity" TargetName="UsernameTextBlock" Value="0"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource PasswordBossGreenColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource WhiteColor}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <LinearGradientBrush x:Key="SecureBrowserButtonBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#DDDDDD" Offset="0"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="SecureBrowserChromeEffectButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" BorderThickness="0" BorderBrush="{DynamicResource SecureBrowserButtonBorderBrush}" Background="{TemplateBinding Background}"
                                CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#DDDDDD" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Opacity" Value="0.8" />-->
                            <Setter Property="BorderThickness" TargetName="border" Value="1" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SettingsLabelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3 8 0 0" />
        <Setter Property="Foreground" Value="{StaticResource SettingsTextLableForeground}" />
    </Style>


    

    <Style x:Key="SettingsSubLabelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="30 16 0 0" />
        <Setter Property="Foreground" Value="{StaticResource SettingsTextLableForeground}" />
    </Style>
    
    <Style x:Key="SettingTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource AddControlTextBoxStyle}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CommonCornerRadius}"  BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <ScrollViewer x:Name="PART_ContentHost"  Focusable="False" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"  />
                    </Border>
                    <ControlTemplate.Triggers>
                       <Trigger Property="IsEnabled" Value="False" >
                            <Setter Property="Background" TargetName="border" Value="#F2F2F2"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextboxBorderbrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextboxBorderbrush}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="3,1,3,0"/>
        <Setter Property="Height" Value="27" />
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayTextForegroundColor}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0 4 0 0"/>
        <Setter Property="Width" Value="340"/>
    </Style>


    <Style x:Key="SettingTextBoxDisableStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource SettingTextBoxStyle}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CommonCornerRadius}"  BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <ScrollViewer x:Name="PART_ContentHost"  Focusable="False" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden" Height="20" />
                    </Border>                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    
    <Style x:Key="SettingsComboboxStyle" TargetType="{x:Type ComboBox}"  BasedOn="{StaticResource GayBorderComboStyle}">
        <Setter Property="Height" Value="27" />
        <Setter Property="Width" Value="340"/>
        <Setter Property="Margin" Value="0 4 0 0"/>
    </Style>


    <Style x:Key="WhiteSettingsButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WhiteColor}"/>
        <Setter Property="BorderBrush" Value="#A3A3A3"/>
        <Setter Property="Width" Value="115"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="{StaticResource CommonCornerRadius}"  BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#F2F2F2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BlueSettingsButton" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1" StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="115"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightGrayTextForegroundColor}" />
        <Setter Property="Background" Value="{DynamicResource PasswordBossBlueHeaderColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="{StaticResource CommonCornerRadius}"  BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#245475" />
                        </Trigger>                      
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="settingsToggleButtonStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Tag" Value="1" />
        <Setter Property="Width" Value="34"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnCheckingFast">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="16" />

                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#00D1A6" To="#00A785" Duration="00:00:00" />

                        </Storyboard>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="16" />

                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#00D1A6" To="#00A785" Duration="00:00:02" />
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimation Storyboard.TargetName="sliderbackground"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            From="#768386" To="#768386" Duration="00:00:02" />
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel x:Name="dockPanel">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="True" VerticalAlignment="Center" />

                        <Border x:Name="sliderbackground" CornerRadius="8"  Background="{DynamicResource LightGrayTextForegroundColor}"
                               HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid Name="backtgl_btn" Margin="0,0,0,0" Background="Transparent" >
                                <Ellipse HorizontalAlignment="Left" VerticalAlignment="Center" x:Name="slider" Margin="2 0 0 0" Width="14" Height="14"
                                        Fill="{DynamicResource WhiteColor}" >
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="0" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Grid>
                        </Border>
                    </DockPanel>


                    <ControlTemplate.Triggers>
                        <Trigger Property="Visibility" Value="Visible">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard >
                                        <StringAnimationUsingKeyFrames Storyboard.Target="{Binding RelativeSource={RelativeSource Self}, Path=Tag}"  Storyboard.TargetProperty="Tag">
                                            <DiscreteStringKeyFrame KeyTime="0:0:0.1" Value="2" />
                                        </StringAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="1" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnCheckingFast}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="2" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="AddItemTextBoxNoWidth" TargetType="{x:Type TextBox}" BasedOn="{StaticResource SettingTextBoxStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="{StaticResource SettingsLightGrayBorderColor}"/>
        <Setter Property="Margin" Value="0 1 0 0"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Border BorderBrush="{DynamicResource PasswordBossRedColor}" BorderThickness="1" CornerRadius="2">
                            <AdornedElementPlaceholder/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{StaticResource CommonCornerRadius}"  BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <ScrollViewer x:Name="PART_ContentHost"  Focusable="False" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"  />
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False" >
                            <Setter Property="Background" TargetName="border" Value="#F2F2F2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip"
                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                    Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AddItemTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource AddItemTextBoxNoWidth}">
        <Setter Property="Width" Value="448"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <Style x:Key="AddItemTextBlock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="15" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3 8 0 0" />
        <Setter Property="Foreground" Value="{StaticResource PasswordBossBlackBackgroundColor}" />
    </Style>

    <SolidColorBrush x:Key="SelectedItemBackground" Color="#7FBDBBBB"/>
    <Style x:Key="AddSecureComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource SettingsLightGrayBorderColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedItemBackground}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"  Background="Transparent" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="{DynamicResource LightGrayTextForegroundColor}" BorderThickness="1 0 0 0" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" >
                            <Path x:Name="arrow" Data="M 8 0 L 4 4 0 0 Z" Fill="#768387"
                                  HorizontalAlignment="Center" Margin="8 0" VerticalAlignment="Center"/>
                        </Border>                        
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">

            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" Width="{TemplateBinding Width}" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
            </Popup>
                <ToggleButton x:Name="toggleButton" Background="Transparent" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="Right"  Grid.ColumnSpan="2">
                <Rectangle Fill="{DynamicResource LightGrayTextForegroundColor}" VerticalAlignment="Stretch" Width="1"/>
                <Image  VerticalAlignment="Center" Margin="8 0"
                                           Source="{DynamicResource imgDownArrow1}" Height="5" Width="8" />
            </StackPanel>-->
        </Grid>
            </Border>   
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


 
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Foreground" Value="{DynamicResource AddItemTextForegroundColor}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">

            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="Transparent"  Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>

                <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="Right"  Grid.ColumnSpan="2">
                    <Rectangle Fill="{DynamicResource LightGrayTextForegroundColor}" VerticalAlignment="Stretch" Width="1"/>
                    <Image  VerticalAlignment="Center" Margin="8 0"
                                           Source="{DynamicResource imgDownArrow1}" Height="5" Width="8" />
                </StackPanel>-->
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
           <!--<Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>-->
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="AddSecureItemComboStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource SettingsLightGrayBorderColor}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SettingsLightGrayBorderColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource WhiteColor}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaSemiBold}" />
        <Setter Property="Height" Value="27" />
        <Setter Property="Margin" Value="0 4 0 0"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="MaxDropDownHeight" Value="200"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource AddSecureComboBoxItemStyle}"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    




    <Style x:Key="SimpleListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="3,4,0,0"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="telerik:DragDropManager.AllowCapturedDrag" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SecureItemsListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0,3,0,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="telerik:DragDropManager.AllowCapturedDrag" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectedItemBackground}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LandingTitelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="Margin" Value="3 40 0 8" />
        <Setter Property="Foreground" Value="{DynamicResource SettingsTextLableForeground}" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="LandingSubTitelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="17" />
        <Setter Property="FontFamily" Value="{DynamicResource ProximaRegular}"/>
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Foreground" Value="{DynamicResource SettingsSecurityForeground}" />
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="NoMouseOverStyleListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoBorderListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SelectedIndex" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>