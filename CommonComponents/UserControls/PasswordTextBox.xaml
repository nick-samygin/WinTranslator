<UserControl x:Class="PasswordBoss.Views.UserControls.PasswordTextBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"             
              xmlns:ui="clr-namespace:PasswordBoss.Helpers"
             xmlns:converters="clr-namespace:QuickZip.Converters;assembly=theme"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">   
    <UserControl.Resources>
        <converters:ParametersConverter x:Key="ParametersConverter"/>   
        <BooleanToVisibilityConverter x:Key="BoolToVisiblity"/>
        <Style x:Key="ShowHideToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <!--<Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>-->
                            <!--<Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Border  BorderThickness="1" CornerRadius="15">
            <Grid>
                <PasswordBox x:Name="GlobalPasswordTextBox" Padding="8,0,40,0" FontFamily="{DynamicResource ProximaRegular}"            
                             FontSize="{DynamicResource FontSize17}" MaxLength="30"  Template="{DynamicResource roundedcornerPasswordBox}"
                             VerticalContentAlignment="Center" CaretBrush="{DynamicResource CaracCursorcolor}"
                           Visibility="{Binding GlobalPasswordTextBoxVisibility, Converter={StaticResource BoolToVisiblity}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PasswordChanged">
                            <i:InvokeCommandAction Command="{Binding PasswordChangedCommand}" 
                                               CommandParameter="{Binding ElementName=GlobalPasswordTextBox}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </PasswordBox>               
                <TextBox x:Name="ShowTextBox" Padding="8,0,32,0" FontSize="{DynamicResource FontSize17}" FontFamily="{DynamicResource ProximaRegular}" 
                     Style="{DynamicResource  TextBoxStyle}" VerticalContentAlignment="Center" Foreground="#232E37" MaxLength="30"
                          Visibility="{Binding ShowTextBoxVisibility, Converter={StaticResource BoolToVisiblity}}"                         
                       CaretBrush="{DynamicResource CaracCursorcolor}"/>           
                <ToggleButton x:Name="ShowPasswordCharsCheckBox" HorizontalAlignment="Right" Margin="0,0,12,0" Background="Transparent" VerticalAlignment="Center"
                              Visibility="{Binding ShowHideImageVisibility, Converter={StaticResource BoolToVisiblity}}"   
                              Style="{DynamicResource ShowHideToggleButtonStyle}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Checked">
                            <i:InvokeCommandAction Command="{Binding ToggledCheckedCommand}" >
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource ParametersConverter}">
                                        <MultiBinding.Bindings>
                                            <Binding ElementName="GlobalPasswordTextBox" />
                                            <Binding ElementName="ShowTextBox"  />
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="Unchecked">
                            <i:InvokeCommandAction Command="{Binding ToggledUncheckedCommand}" >
                                <i:InvokeCommandAction.CommandParameter>
                                    <MultiBinding Converter="{StaticResource ParametersConverter}">
                                        <MultiBinding.Bindings>
                                            <Binding ElementName="GlobalPasswordTextBox" />
                                            <Binding ElementName="ShowTextBox"  />
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </i:InvokeCommandAction.CommandParameter>
                            </i:InvokeCommandAction>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <Image x:Name="ShowHideImage"  Source="{Binding ShowHideImageIcon}" />                    
                 
                </ToggleButton>
            </Grid>
        </Border>

    </Grid>
</UserControl>
