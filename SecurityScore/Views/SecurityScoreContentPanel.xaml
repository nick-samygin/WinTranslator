<UserControl x:Class="PasswordBoss.Views.SecurityScoreContentPanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:pbviews="clr-namespace:PasswordBoss.Views"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"   
             xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
             xmlns:ui="clr-namespace:PasswordBoss.Helpers"
             xmlns:uc="clr-namespace:PasswordBoss.UserControls;assembly=theme"
             mc:Ignorable="d">
    <UserControl.Resources>
        <ui:ParametersConverter x:Key="ParametersConverter" />
        <ui:VisibilityToBoolConverter x:Key="VisibilityToBool" />
        <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
        <ui:BoolToVisibilityInverter x:Key="BoolToVisibilityInverter"/>

        <Style x:Key="SlightExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Path x:Name="arrow"  Data="M 0 0 L 9 5 0 10  Z" HorizontalAlignment="Center" SnapsToDevicePixels="false" Fill="{TemplateBinding Foreground}" StrokeThickness="2" VerticalAlignment="Center"/>
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 10 0 L 5 9 0 0 Z"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="PasswordProgressBarStyle" TargetType="{x:Type ProgressBar}">
            <Setter Property="Background" Value="#E4E9E9"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot" Margin="0 6 0 6">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                            <Rectangle x:Name="PART_Track"/>

                            <Grid x:Name="PART_Indicator"  HorizontalAlignment="Left" >
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                <Rectangle  Fill="{TemplateBinding Foreground}" Width="3" Margin="0 -4" HorizontalAlignment="Right"/>
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                           
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="True">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ExpanderStyleSecuritScore" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <ui:AdornedControl IsAdornerVisible="{TemplateBinding Visibility, Converter={StaticResource VisibilityToBool}}">
                            <ui:AdornedControl.AdornerContent>
                                <Canvas>
                                    <Grid x:Name="PopupRootGrid" Canvas.Top="-22" Background="Transparent">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="23" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="30" />
                                    </Grid.ColumnDefinitions>
                                    <Border Grid.Column="1" BorderThickness="0.7,0.7,0.7,0" BorderBrush="{DynamicResource GrayColor}"
                                        Background="{DynamicResource WhiteColor}" CornerRadius="3 3 0 0" />
                                    <ToggleButton x:Name="HeaderSite" Margin="0,0,0,0" Grid.Column="1" Grid.Row="0"
                                              Width="20" HorizontalAlignment="Center" Background="{DynamicResource WhiteColor}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              Content="{TemplateBinding Header}" DockPanel.Dock="Top"
                                              Foreground="{TemplateBinding Foreground}"
                                              FontWeight="{TemplateBinding FontWeight}"
                                              FontStyle="{TemplateBinding FontStyle}"
                                              FontStretch="{TemplateBinding FontStretch}"
                                              FontSize="{TemplateBinding FontSize}"
                                              FontFamily="{TemplateBinding FontFamily}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}">
                                        <ToggleButton.FocusVisualStyle>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Border>
                                                                <Rectangle Margin="0" SnapsToDevicePixels="True"
                                                                       Stroke="Black" StrokeThickness="1"
                                                                       StrokeDashArray="1 2" />
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.FocusVisualStyle>
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Padding="{TemplateBinding Padding}" CornerRadius="3">
                                                                <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                        <Grid.ColumnDefinitions>
                                                                            <ColumnDefinition Width="19" />
                                                                            <ColumnDefinition Width="*" />
                                                                        </Grid.ColumnDefinitions>
                                                                        <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5"
                                                                      HorizontalAlignment="Center"
                                                                      SnapsToDevicePixels="False" Stroke="{DynamicResource CalendarItemColor}"
                                                                      StrokeThickness="2" VerticalAlignment="Center" />
                                                                    <ContentPresenter
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                    Content="{TemplateBinding Content}" Grid.Column="1"
                                                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                    HorizontalAlignment="Left" Margin="4,0,0,0"
                                                                    RecognizesAccessKey="True"
                                                                    SnapsToDevicePixels="True"
                                                                    VerticalAlignment="Center" />
                                                                </Grid>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Data" TargetName="arrow"
                                                                        Value="M0,6.5 H10" />
                                                                    </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">

                                                                    <Setter Property="Stroke" TargetName="arrow"
                                                                        Value="{DynamicResource BlackColor}" />
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">

                                                                    <Setter Property="Stroke" TargetName="arrow"
                                                                        Value="{DynamicResource BlackColor}" />
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">

                                                                    <Setter Property="Stroke" TargetName="arrow"
                                                                        Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                </Grid>
                                </Canvas>
                            </ui:AdornedControl.AdornerContent>
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="True">
                            <Grid Name="expanderGrid" Width="Auto">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="30" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Border Grid.Column="2" Grid.Row="1" Background="{DynamicResource WhiteColor}" />
                                
                                <ContentPresenter x:Name="ExpandSite" Grid.Row="1" Grid.ColumnSpan="3"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  DockPanel.Dock="Bottom" Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" Visibility="Collapsed"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                        </ui:AdornedControl>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="19" />
                                                                    <ColumnDefinition Width="*" />
                                                                </Grid.ColumnDefinitions>
                                                                <Grid>
                                                                    <Grid.LayoutTransform>
                                                                        <TransformGroup>
                                                                            <RotateTransform Angle="180" />
                                                                        </TransformGroup>
                                                                    </Grid.LayoutTransform>
                                                                    
                                                                    <Path Fill="White" Height="12" Width="10"
                                                                          x:Name="arrow" Data="M0,6.3 H12 M5,10 V15Z"
                                                                          HorizontalAlignment="Center"
                                                                          SnapsToDevicePixels="false"
                                                                          Stroke="{DynamicResource SettingsGreenColor}"
                                                                          StrokeThickness="2"
                                                                          VerticalAlignment="Center" />
                                                                    
                                                                </Grid>
                                                                <ContentPresenter
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                    Content="{TemplateBinding Content}" Grid.Column="1"
                                                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                    HorizontalAlignment="Left" Margin="4,0,0,0"
                                                                    RecognizesAccessKey="True"
                                                                    SnapsToDevicePixels="True"
                                                                    VerticalAlignment="Center" />
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="arrow"
                                                                        Value="M0,6.5 H10" />
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Stroke" TargetName="arrow"
                                                                        Value="{DynamicResource CheckBoxReadAcceptBorderbrush}" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="StepExpanderStyle" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource LightGrayTextForegroundColor}"/>
            <Setter Property="ExpandDirection" Value="Down"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="7 11"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{DynamicResource TextboxBorderbrush}" BorderThickness="0 0 0 1" Background="{TemplateBinding Background}"  SnapsToDevicePixels="True">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}"
                                              FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                               MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ToggleButton.FocusVisualStyle>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Border>
                                                            <Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.FocusVisualStyle>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}" x:Name="border" BorderBrush="{DynamicResource TextboxBorderbrush}"
                                                                BorderThickness="0" >
                                                            <Grid  Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="49"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <!--<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>-->
                                                                <Grid Visibility="{Binding ShowArrow,Converter={StaticResource BoolToVisibility}}">
                                                                    <Path x:Name="arrow" Visibility="Collapsed" Width="39" Height="18"  Stretch="Fill" Fill="{DynamicResource PasswordBossDarkGreenColor}" HorizontalAlignment="Left"
                                                                      Data="M 18.309,27.6216L 33.2934,27.617L 33.2933,24.4885L 41.619,29.9964L 33.2933,35.507L 33.2914,32.337L 18.309,32.3363L 18.309,27.6216 Z "/>
                                                                </Grid>   
                                                                    <Path Width="22" Height="19" Visibility="{Binding ShowCheckIcon,Converter={StaticResource BoolToVisibility}}"  Stretch="Fill" Fill="#FF16B795" Data="F1 M 2.40717,9.073L 2.4078,9.07237L 0.00531928,6.66989L 2.32558,4.34963L 4.72806,6.7521L 11.4802,-9.53674e-007L 13.8004,2.32026L 7.04833,9.07237L 7.05605,9.08009L 4.73579,11.4004L 4.72806,11.3926L 4.72743,11.3933L 2.40717,9.073 Z "/>
                                                                
                                                                <StackPanel Orientation="Horizontal" Grid.Column="1">
                                                                    <TextBlock  x:Name="stepTxt"  FontSize="17" Foreground="{DynamicResource LightGrayTextForegroundColor}">
                                                                        <TextBlock.Inlines>
                                                                            <Run Text="{DynamicResource SecurityScoreStep}"/>
                                                                            <Run Text="{Binding StepNumber}"/>
                                                                            <Run Text=": "/>
                                                                        </TextBlock.Inlines>
                                                                    </TextBlock>
                                                                    <TextBlock Text="{Binding Titel}" FontSize="17"  x:Name="titeTxt" Foreground="{DynamicResource LightGrayTextForegroundColor}"/>
                                                                    <TextBlock  FontSize="17"  x:Name="countTxt" Margin="8 0 0 0" Foreground="{Binding Color}" Visibility="{Binding ShowCount,Converter={StaticResource BoolToVisibility}}" Text="{Binding Count,StringFormat={}({0})}"/>


                                                                </StackPanel>
                                                                <Path Fill="White" Height="12" Width="10"
                                                                          x:Name="plusSign" Data="M0,6.3 H12 M5,10 V15Z"
                                                                          HorizontalAlignment="Right"
                                                                          SnapsToDevicePixels="false" Grid.Column="2" Margin="0 0 33 0"
                                                                          Stroke="{DynamicResource PasswordBossBlueHeaderColor}"
                                                                          StrokeThickness="2"
                                                                          VerticalAlignment="Center" />                                                             
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" Value="M0,6.5 H18" TargetName="plusSign" />
                                                                <!--<Setter Property="Width" Value="18" TargetName="plusSign" />-->
                                                                <Setter Property="Margin" TargetName="border" Value="-1"/>
                                                                <Setter Property="Stroke" TargetName="plusSign" Value="White"/>
                                                                <Setter Property="Foreground" TargetName="titeTxt" Value="White"/>
                                                                <Setter Property="Foreground" TargetName="countTxt" Value="White"/>
                                                                <Setter Property="FontWeight" TargetName="stepTxt" Value="Normal"/>
                                                                <Setter Property="Foreground" TargetName="stepTxt" Value="White"/>                                                               
                                                                <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                                                                <Setter Property="Background" TargetName="border" Value="{DynamicResource PasswordBossBlueHeaderColor}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Foreground" TargetName="stepTxt" Value="{DynamicResource PasswordBossDarkGreenColor}"/>
                                                                <Setter Property="Visibility" TargetName="arrow" Value="Visible"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>

                                    <ContentPresenter x:Name="ExpandSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                             
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Foreground" TargetName="HeaderSite" Value="White"/>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Right">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="19"/>
                                                                    <RowDefinition Height="*"/>
                                                                </Grid.RowDefinitions>
                                                                <Grid>
                                                                    <Grid.LayoutTransform>
                                                                        <TransformGroup>
                                                                            <RotateTransform Angle="-90"/>
                                                                        </TransformGroup>
                                                                    </Grid.LayoutTransform>
                                                                    <Ellipse x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="19" Stroke="#FF333333" VerticalAlignment="Center" Width="19"/>
                                                                    <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2" VerticalAlignment="Center"/>
                                                                </Grid>
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="19"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Grid>
                                                                    <Grid.LayoutTransform>
                                                                        <TransformGroup>
                                                                            <RotateTransform Angle="180"/>
                                                                        </TransformGroup>
                                                                    </Grid.LayoutTransform>
                                                                    <Ellipse x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="19" Stroke="#FF333333" VerticalAlignment="Center" Width="19"/>
                                                                    <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2" VerticalAlignment="Center"/>
                                                                </Grid>
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Left">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                <Setter Property="Style" TargetName="HeaderSite">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}">
                                                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="19"/>
                                                                    <RowDefinition Height="*"/>
                                                                </Grid.RowDefinitions>
                                                                <Grid>
                                                                    <Grid.LayoutTransform>
                                                                        <TransformGroup>
                                                                            <RotateTransform Angle="90"/>
                                                                        </TransformGroup>
                                                                    </Grid.LayoutTransform>
                                                                    <Ellipse x:Name="circle" Fill="White" HorizontalAlignment="Center" Height="19" Stroke="#FF333333" VerticalAlignment="Center" Width="19"/>
                                                                    <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2" VerticalAlignment="Center"/>
                                                                </Grid>
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF5593FF"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFF3F9FF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FF3C77DD"/>
                                                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFD9ECFF"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Stroke" TargetName="circle" Value="#FFBCBCBC"/>
                                                                <Setter Property="Fill" TargetName="circle" Value="#FFE6E6E6"/>
                                                                <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </UserControl.Resources>

    <Grid Name="mainGrid" MaxHeight="688" >
        <!--<i:Interaction.Triggers>
            <i:EventTrigger EventName="LostFocus">
                <i:InvokeCommandAction Command="{Binding MainContentLostFocusCommand}" CommandParameter="{Binding ElementName=mainGrid, Path=IsKeyboardFocusWithin}" />
            </i:EventTrigger>
        </i:Interaction.Triggers>-->
        <Grid>
            <Expander Name="SecurityScoreExpander" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                      Canvas.ZIndex="1"  HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
                      ExpandDirection="Up" Height="Auto" IsExpanded="{Binding SecurityScoreExpanded, Mode=TwoWay}"
                      Style="{DynamicResource ExpanderStyleSecuritScore}">
               <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Expanded">
                        <i:InvokeCommandAction Command="{Binding SecurityScoreExpandedCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Collapsed">
                        <i:InvokeCommandAction Command="{Binding SecurityScoreCollapsedCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Grid Background="{DynamicResource WhiteColor}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="1.5*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Border Grid.Row="0" Grid.Column="0" BorderThickness="0,0.6,0,0" BorderBrush="{DynamicResource GrayColor}" Width="11"
                            HorizontalAlignment="Left" />
                    <Border Grid.Row="0" Grid.Column="1" Width="18" HorizontalAlignment="Left"
                            BorderThickness="0,1,0,0" BorderBrush="White" />
                    <Border Grid.Row="0" Grid.Column="1" Margin="19,0,0,0" Grid.ColumnSpan="3"
                            BorderThickness="0,0.6,0,0" BorderBrush="{DynamicResource GrayColor}" />
                    <TextBlock Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="3" Margin="0,10" Visibility="{Binding SecurityScoreVisibility,Converter={StaticResource BoolToVisibilityInverter}}"
                               VerticalAlignment="Center" HorizontalAlignment="Left">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonDown">
                            <i:InvokeCommandAction Command="{Binding SecurityScoreToggleExpanderCommand}" CommandParameter="{Binding ElementName=btnDuplicatPwd}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                        <TextBlock.Inlines>
                            <Run Text="{DynamicResource SecurityScore}" FontFamily="{DynamicResource ProximaSemiBold}"
                                 FontWeight="SemiBold" FontSize="13"
                                 Foreground="{DynamicResource LightGrayTextForegroundColor}" />
                            <Run Text="{Binding SecurityScore}" FontSize="24"
                                 FontFamily="{DynamicResource ProximaRegular}" FontWeight="Normal" Foreground="{DynamicResource PasswordBossDarkGreenColor}" />
                        </TextBlock.Inlines>
                    </TextBlock>
                    <Grid Name="SecurityScoreGrid" Grid.Row="1" Grid.ColumnSpan="4" Margin="20 0" Height="690"
                          Visibility="{Binding SecurityScoreVisibility, Converter={StaticResource BoolToVisibility}}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="130" />
                            <RowDefinition Height="8" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="355" />
                            <ColumnDefinition Width="1" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" Grid.ColumnSpan="3" Margin="0 25 0 0" Visibility="{Binding IsStepExpanded,Converter={StaticResource BoolToVisibilityInverter}}">
                            <TextBlock Text="{DynamicResource SecurityScoreHeadline}" HorizontalAlignment="Center" FontSize="34" Foreground="{DynamicResource PasswordBossDarkGreenColor}" FontFamily="{DynamicResource OBProximaRegular}"/>
                            <TextBlock Text="{DynamicResource SecurityScoreSubhead}" FontSize="16" HorizontalAlignment="Center" Foreground="{DynamicResource LightGrayTextForegroundColor}"/>
                     
                            <Separator Background="{DynamicResource TextboxBorderbrush}" Grid.ColumnSpan="3" Margin="0 30 0 0" VerticalAlignment="Bottom"/>
                        </StackPanel>
                        
                        
                        <Separator Background="{DynamicResource TextboxBorderbrush}" Grid.ColumnSpan="3" Grid.Row="1" VerticalAlignment="Bottom"/>
                        <Rectangle Fill="{DynamicResource TextboxBorderbrush}" Grid.Column="1" Margin="0 -2 0 2" Grid.Row="1" Width="1" VerticalAlignment="Stretch"/>

                        <Grid Grid.Row="1" Margin="5 15 11 15" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="2*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="27"/>
                            </Grid.RowDefinitions>
                             
                            <TextBlock Text="YOUR SECURITY SCORE" FontWeight="Bold" TextWrapping="Wrap" HorizontalAlignment="Center"  FontSize="20" Foreground="{DynamicResource PasswordBossDarkGreenColor}" FontFamily="{DynamicResource OBProximaRegular}"/>
                            <TextBlock Text="{Binding SecurityScore}" Grid.Column="2" HorizontalAlignment="Center" FontSize="60" FontWeight="Bold"
                                       VerticalAlignment="Top" Foreground="{DynamicResource PasswordBossDarkGreenColor}" 
                                       FontFamily="{DynamicResource MuseoSlab}"/>
                            
                            <Path x:Name="arrow" Data="M0,0L330,0 342,12 330,24 0,24" Grid.ColumnSpan="3" Grid.Row="1"
                                                                      HorizontalAlignment="Center" 
                                                                      SnapsToDevicePixels="False" Fill="{DynamicResource PasswordBossDarkGreenColor}"
                                                                      StrokeThickness="2" VerticalAlignment="Stretch" />
                            <TextBlock Text="{DynamicResource SecurityScoreArrowText}" Grid.ColumnSpan="3" Grid.Row="1" HorizontalAlignment="Center"
                                       VerticalAlignment="Top" Foreground="White" FontSize="14" FontWeight="SemiBold"/>
                        </Grid>

                        <Grid Grid.Row="1" Grid.Column="2" Margin="20 3 5 0" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="11"/>
                                <ColumnDefinition Width="282"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                            </Grid.RowDefinitions>

                            <TextBlock Text="{DynamicResource SecurityScoreAllPasswords}"  HorizontalAlignment="Right" FontSize="13" VerticalAlignment="Center" Foreground="{DynamicResource AllPasswordsColor}"/>
                            <ProgressBar Maximum="{Binding AllPasswordsCount}"  Value="100" Height="30" Grid.Column="2"  Style="{DynamicResource PasswordProgressBarStyle}" Foreground="{DynamicResource AllPasswordsColor}" />
                            <TextBlock Text="{Binding AllPasswordsCount}" Grid.Column="2"   Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{DynamicResource WhiteColor}"/>

                            <TextBlock Text="{DynamicResource SecurityScoreDuplicates}"  FontSize="13" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{DynamicResource DuplicatePasswordsColor}"/>
                            <ProgressBar Maximum="{Binding AllPasswordsCount}"  Value="{Binding Steps[0].Count}" Height="30" Grid.Column="2"  Grid.Row="1"  Style="{DynamicResource PasswordProgressBarStyle}"  Foreground="{DynamicResource DuplicatePasswordsColor}"/>
                            <TextBlock Text="{Binding Steps[0].Count}" Grid.Column="2"  Grid.Row="1" Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{DynamicResource WhiteColor}">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Steps[0].Count}" Value="0">
                                                <Setter Property="Foreground" Value="{DynamicResource DuplicatePasswordsColor}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <TextBlock Text="{DynamicResource SecurityScoreWeak}"   FontSize="13" Grid.Row="2" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{DynamicResource WeakPasswordsColor}"/>
                            <ProgressBar Maximum="{Binding AllPasswordsCount}"  Height="30" Value="{Binding Steps[1].Count}" Grid.Column="2"  Grid.Row="2"  Style="{DynamicResource PasswordProgressBarStyle}" Foreground="{DynamicResource WeakPasswordsColor}" />
                            <TextBlock Text="{Binding Steps[1].Count}" Grid.Column="2"  Grid.Row="2" Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{DynamicResource WhiteColor}">
                            </TextBlock>
                            <TextBlock Text="{DynamicResource SecurityScoreOld}"  FontSize="13" Grid.Row="3" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="{DynamicResource OldPasswordsColor}"/>
                            <ProgressBar Maximum="{Binding AllPasswordsCount}"  Value="{Binding Steps[2].Count}" Height="30" Grid.Column="2"   Grid.Row="3"  Style="{DynamicResource PasswordProgressBarStyle}" Foreground="{DynamicResource OldPasswordsColor}" />
                            <TextBlock Text="{Binding Steps[2].Count}" Grid.Column="2"  Grid.Row="3" Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{DynamicResource WhiteColor}">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Steps[2].Count}" Value="0">
                                                <Setter Property="Foreground" Value="{DynamicResource OldPasswordsColor}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>

                        <Border  Background="{DynamicResource PasswordBossDarkGreenColor}" Grid.ColumnSpan="3" Grid.Row="3"  Visibility="{Binding IsStepExpanded,Converter={StaticResource BoolToVisibilityInverter}}">
                            <TextBlock Text="{DynamicResource SecurityScoreSubhead2}" FontWeight="Light" TextAlignment="Center" FontSize="23" MaxWidth="470" TextWrapping="Wrap" Margin="22 14 22 12"  HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource WhiteColor}"/>
                        </Border>
                        <ListBox ItemsSource="{Binding Steps}" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden" Grid.ColumnSpan="3" Grid.Row="4"  HorizontalAlignment="Stretch" BorderThickness="1" BorderBrush="{DynamicResource TextboxBorderbrush}" Background="Transparent"
                                     HorizontalContentAlignment="Stretch"  ItemContainerStyle="{DynamicResource NoMouseOverStyleListBoxItemStyle}" VerticalAlignment="Top" 
                                 Style="{DynamicResource NoBorderListBoxStyle}">
                                <ListBox.ItemTemplate>                                    
                                    <DataTemplate>
                                        <Expander  HorizontalAlignment="Stretch" Style="{StaticResource StepExpanderStyle}" IsExpanded="{Binding IsStepExpanded,Mode=TwoWay}" Header="{Binding .}" >
                                             <Expander.Content>                                                 
                                            <!--<ScrollViewer   HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto" VerticalAlignment="Stretch" MaxHeight="180" >-->
                                                <ContentControl Content="{Binding StepContent}"  Margin="18 0 0 0"/>                                               
                                             <!--</ScrollViewer>-->
                                        </Expander.Content>
                                        </Expander>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                    </Grid>
                </Grid>
            </Expander>
        </Grid>
    </Grid>
</UserControl>
